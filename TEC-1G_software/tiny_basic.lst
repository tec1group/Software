0000                             ;*************************************************************
0000                             ; 
0000                             ;                 TINY BASIC FOR ZILOG Z80
0000                             ;                       VERSION 2.0
0000                             ;                     BY LI-CHEN WANG
0000                             ; 
0000                             ;                  MODIFIED AND TRANSLATED
0000                             ;                    TO INTEL MNEMONICS
0000                             ;                     BY ROGER RAUSKOLB
0000                             ;                      10 OCTOBER,1976
0000                             ; 
0000                             ;                  MODIFIED AND TRANSLATED
0000                             ;                    TO ZILOG MNEMONICS
0000                             ;                      BY DOUG GABBARD
0000                             ;            www.retrodepot.net
0000                             ; 
0000                             ;                  MODIFIED AND FIXED TO WORK
0000                             ;                  ON THE TEC-1G Z80 SBC USING
0000                             ;                  ON BOARD BIT BANG SERIAL
0000                             ;                  BY BRIAN CHIHA, OCT 2023
0000                             ; 
0000                             ;           RELEASED TO THE PUBLIC
0000                             ;                      10 OCTOBER,2017
0000                             ;                  YEAH, 41 YEARS LATER....
0000                             ; 
0000                             ;                         @COPYLEFT
0000                             ;                   ALL WRONGS RESERVED
0000                             ; 
0000                             ;*************************************************************
0000                             ; This code is derived from the original 8080 Tiny Basic.
0000                             ; It was first compiled in 8080 Mnemonics, then disassembled
0000                             ; into Zilog Mnemonics.  And then checked against the original
0000                             ; to ensure accuracy.  It was then partially enhanced with z80
0000                             ; specific code. And once done, it was then modified to work
0000                             ; with the G80-S Micro Computer. However, that portion of the
0000                             ; code has been left out in order to make this code a little
0000                             ; more portable.  There are only three routines that one needs
0000                             ; to write, and specifing the serial port's I/O address, in
0000                             ; order to make this version work with your own DIY computer.
0000                             ; Those routines can be found at the end of the source code.
0000                             ; 
0000                             ; I hope you find good use for this relic. However, I would
0000                             ; ask that if you do find use for it, please put a reference
0000                             ; to me in your work. And please, distribute freely.
0000                             ;*************************************************************
0000                             ; Modified to work on the TEC-1F using Bit Bang Serial
0000                             ; TEC 1F Contants
0000                BAUD:     EQU   001BH   ; BAUD 4800 delay
0000                SYS_INPUT:   EQU   03H   ; Keyboard Bit 7 (INPUT)
0000                DIGITS:   EQU   01H   ;Seven Segment Digits
0000                             ;TINY BASIC CONSTANTS
0000                             ;ASCII CONTROL CHARACTERS
0000                SPACE:    EQU   20H   ; Space
0000                CTRLC:    EQU   03H   ; Control "C"
0000                CTRLG:    EQU   07H   ; Control "G"
0000                BKSP:     EQU   08H   ;Back space
0000                LF:       EQU   0AH   ; Line feed
0000                VT:       EQU   0BH   ; Vertical tab
0000                CS:       EQU   0CH   ; Clear screen
0000                CR:       EQU   0DH   ; Carriage return
0000                CTRLO:    EQU   0FH   ; Control "O"
0000                CTRLQ:    EQU   11H   ; Control "Q"
0000                CTRLD:    EQU   04H   ; Control "D"
0000                CTRLU:    EQU   15H   ; Control "U"
0000                CTRLZ:    EQU   1AH   ; Control "Z"
0000                ESC:      EQU   1BH   ; Escape
0000                DEL:      EQU   7FH   ; Delete
0000                             ;LOCAL VARIABLES
0000                OCSW:     EQU   17C0H   ;SWITCH FOR OUTPUT
0000                CURRNT:   EQU   OCSW+1   ;POINTS FOR OUTPUT
0000                STKGOS:   EQU   OCSW+3   ;SAVES SP IN "GOSUB"
0000                VARNXT:   EQU   OCSW+5   ;TEMP STORAGE
0000                STKINP:   EQU   OCSW+7   ;SAVES SP IN "INPUT"
0000                LOPVAR:   EQU   OCSW+9   ;"FOR" LOOP SAVE AREA
0000                LOPINC:   EQU   OCSW+11   ;INCREMENT
0000                LOPLMT:   EQU   OCSW+13   ;LIMIT
0000                LOPLN:    EQU   OCSW+15   ;LINE NUMBER
0000                LOPPT:    EQU   OCSW+17   ;TEXT POINTER
0000                RANPNT:   EQU   OCSW+19   ;RANDOM NUMBER POINTER
0000                TXTUNF:   EQU   OCSW+21   ;->UNFILLED TEXT AREA
0000                TXTBGN:   EQU   OCSW+23   ;TEXT SAVE AREA BEGINS
0000                TXTEND:   EQU   3E00H   ;TEXT SAVE AREA ENDS
0000                             ;STACK, VARIABLES AND INPUT BUFFER
0000                VARBGN:   EQU   3E00H   ;VARIABLE LOCATION (SIZE OF 55)
0000                BUFFER:   EQU   3E37H   ;INPUT BUFFER (SIZE OF 80)
0000                BUFEND:   EQU   3E87H   ;BUFFER END
0000                STKLMT:   EQU   3E88H   ;TOP LIMIT FOR STACK
0000                STACK:    EQU   3EFFH   ;STACK
0000                             ;Mon3 API Hacks
0000                GETGLCDTERM:   EQU   0CFA6H   
0000                SENDSTRINGTOLCD:   EQU   0DBADH   
0000                TIMEDELAY:   EQU   0C6F9H   
0000                SENDCHARTOLCD:   EQU   0DB3CH   
0000                MATRIXSCAN:   EQU   0CC36H   
0000                PARSEMATRIXSCAN:   EQU   0D0FFH   
0000                             ;*************************************************************
0000                             ; *** ZERO PAGE SUBROUTINES ***
0000                             ; 
0000                             ; THE Z80 INSTRUCTION SET ALLOWS FOR 8 ROUTINES IN LOW MEMORY
0000                             ; THAT MAY BE CALLED BY RST 00H, 08H, 10H, 18H, 20H, 28H, 30H,
0000                             ; AND 38H.  THIS IS A ONE BYTE INSTRUCTION, AND IS FUNCTIONALLY
0000                             ; SIMILAR TO THE THREE BYTE INSTRUCTION "CALL XXXX". TINY BASIC
0000                             ; WILL USE THE RST INSTRUCTION FOR THE 7 MOST FREQUENTLY USED
0000                             ; SUBROUTINES. TWO OTHER SUBROUTINES (CRLF & TSTNUM) ARE ALSO
0000                             ; IN THIS SECTION. THEY CAN BE REACHED WITH "CALL".
0000                             ;*************************************************************
0000                             ; DWA:    MACRO WHERE
0000                             ;         .db   (WHERE >> 8) & 0FFH
0000                             ; ;        .db   (WHERE >> 8) + 128
0000                             ;         .db   WHERE & 0FFH
0000                             ;         ENDM
0000                .macro DWA,
0000                             ; 
0000                 .db msb(%%1) + 128
0000                 .db lsb(%%1)
0000                .endm
0000                 
4000                          .ORG   4000H   
4000                TINYBASIC:      
4000   31 FF 3E               LD   SP,STACK   ;*** COLD START ***
4003   C3 F4 46               JP   INIT   
4006   E3           RST08TB:   EX   (SP),HL   ;*** TSTC OR RST 08H ***
4007   CD 25 40               CALL   RST28TB   ;IGNORE BLANKS AND
400A   BE                     CP   (HL)   ;TEST CHARACTER
400B   C3 61 40               JP   TC1   ;REST OF THIS IS AT TC1
400E                CRLF:        
400E   3E 0D                  LD   A,CR   ;*** CRLF ***
4010   F5           RST10TB:   PUSH   AF   ;*** OUTC OR RST 10H ***
4011   3A C0 17               LD   A,(OCSW)   ;PRINT CHARACTER ONLY
4014   B7                     OR   A   ;IF OCSW SWITCH IS ON
4015   C3 14 47               JP   OUTC   ;REST OF THIS AT OUTC
4018   CD B3 43     RST18TB:   CALL   EXPR2   ;*** EXPR OR RST 18H ***
401B   E5                     PUSH   HL   ;EVALUATE AN EXPRESSION
401C   C3 6F 43               JP   EXPR1   ;REST OF IT AT EXPR1
401F   7C           RST20TB:   LD   A,H   ;*** COMP OR RST 20H ***
4020   BA                     CP   D   ;COMPARE HL WITH DE
4021   C0                     RET   NZ   ;RETURN CORRECT C AND
4022   7D                     LD   A,L   ;Z FLAGS
4023   BB                     CP   E   ;BUT OLD A IS LOST
4024   C9                     RET      
4025   1A           RST28TB:   LD   A,(DE)   ;*** IGNBLK/RST 28H ***
4026   FE 20                  CP   SPACE   ;IGNORE BLANKS
4028   C0                     RET   NZ   ;IN TEXT (WHERE DE->)
4029   13                     INC   DE   ;AND RETURN THE FIRST
402A   18 F9                  JR   RST28TB   ;NON-BLANK CHAR. IN A
402C   F1           RST30TB:   POP   AF   ;*** FINISH/RST 30H ***
402D   CD 13 45               CALL   FIN   ;CHECK END OF COMMAND
4030   C3 2C 45               JP   QWHAT   ;PRINT "WHAT?" IF WRONG
4033   CD 25 40     RST38TB:   CALL   RST28TB   ;*** TSTV OR RST 38H ***
4036   D6 40                  SUB   40H   ;TEST VARIABLES
4038   D8                     RET   C   ;C:NOT A VARIABLE
4039   20 1A                  JR   NZ,TV1   ;NOT "@" ARRAY
403B   13                     INC   DE   ;IT IS THE "@" ARRAY
403C   CD 62 44               CALL   PARN   ;@ SHOULD BE FOLLOWED
403F   29                     ADD   HL,HL   ;BY (EXPR) AS ITS INDEX
4040   38 56                  JR   C,QHOW   ;IS INDEX TOO BIG?
4042   D5                     PUSH   DE   ;WILL IT OVERWRITE
4043   EB                     EX   DE,HL   ;TEXT?
4044   CD B0 44               CALL   SIZE   ;FIND SIZE OF FREE
4047   CD 1F 40               CALL   RST20TB   ;AND CHECK THAT
404A   DA 5C 45               JP   C,ASORRY   ;IF SO, SAY "SORRY"
404D   21 00 3E               LD   HL,VARBGN   ;IF NOT GET ADDRESS
4050   CD D2 44               CALL   SUBDE   ;OF @(EXPR) AND PUT IT
4053   D1                     POP   DE   ;IN HL
4054   C9                     RET      ;C FLAG IS CLEARED
4055                TV1:         
4055   FE 1B                  CP   1BH   ;NOT @, IS IT A TO Z?
4057   3F                     CCF      ;IF NOT RETURN C FLAG
4058   D8                     RET   C   
4059   13                     INC   DE   ;IF A THROUGH Z
405A   21 00 3E               LD   HL,VARBGN   ;COMPUTE ADDRESS OF
405D   07                     RLCA      ;THAT VARIABLE
405E   85                     ADD   A,L   ;AND RETURN IT IN HL
405F   6F                     LD   L,A   ;WITH C FLAG CLEARED
4060                             ;        XOR A
4060                             ;        ADC A,H
4060                             ;        LD H,A
4060   C9                     RET      
4061                TC1:         
4061   23                     INC   HL   ;COMPARE THE BYTE THAT
4062   28 07                  JR   Z,TC2   ;FOLLOWS THE RST INST.
4064   C5                     PUSH   BC   ;WITH THE TEXT (DE->)
4065   4E                     LD   C,(HL)   ;IF NOT =, ADD THE 2ND
4066   06 00                  LD   B,00H   ;BYTE THAT FOLLOWS THE
4068   09                     ADD   HL,BC   ;RST TO THE OLD PC
4069   C1                     POP   BC   ;I.E., DO A RELATIVE
406A   1B                     DEC   DE   ;JUMP IF NOT =
406B                TC2:         
406B   13                     INC   DE   ;IF =, SKIP THOSE BYTES
406C   23                     INC   HL   ;AND CONTINUE
406D   E3                     EX   (SP),HL   
406E   C9                     RET      
406F                TSTNUM:      
406F   21 00 00               LD   HL,0000H   ;*** TSTNUM ***
4072   44                     LD   B,H   ;TEST IF THE TEXT IS
4073   CD 25 40               CALL   RST28TB   ;A NUMBER
4076                TN1:         
4076   FE 30                  CP   "0"   ;IF NOT, RETURN 0 IN
4078   D8                     RET   C   ;B AND HL
4079   FE 3A                  CP   ":"   ;IF NUMBERS, CONVERT
407B   D0                     RET   NC   ;TO BINARY IN HL AND
407C   3E F0                  LD   A,0F0H   ;SET B TO # OF DIGITS
407E   A4                     AND   H   ;IF H>255, THERE IS NO
407F   20 17                  JR   NZ,QHOW   ;ROOM FOR NEXT DIGIT
4081   04                     INC   B   ;B COUNTS # OF DIGITS
4082   C5                     PUSH   BC   
4083   44                     LD   B,H   ;HL=10*HL+(NEW DIGIT)
4084   4D                     LD   C,L   
4085   29                     ADD   HL,HL   ;WHERE 10* IS DONE BY
4086   29                     ADD   HL,HL   ;SHIFT AND ADD
4087   09                     ADD   HL,BC   
4088   29                     ADD   HL,HL   
4089   1A                     LD   A,(DE)   ;AND (DIGIT) IS FROM
408A   13                     INC   DE   ;STRIPPING THE ASCII
408B   E6 0F                  AND   0FH   ;CODE
408D   85                     ADD   A,L   
408E   6F                     LD   L,A   
408F   3E 00                  LD   A,00H   ;DO THIS TO MAINTAIN CARRY FLAG
4091   8C                     ADC   A,H   ;WHILE SETTING A TO ZERO
4092   67                     LD   H,A   
4093   C1                     POP   BC   
4094   1A                     LD   A,(DE)   ;DO THIS DIGIT AFTER
4095   F2 76 40               JP   P,TN1   ;DIGIT. S SAYS OVERFLOW
4098                QHOW:        
4098   D5                     PUSH   DE   ;*** ERROR "HOW?" ***
4099                AHOW:        
4099   11 9F 40               LD   DE,HOW   
409C   C3 30 45               JP   ERROR_ROUTINE   
409F   48 4F 57 3F 0D HOW:    DB   "HOW?",CR   
40A4   4F 4B 0D     OK:       DB   "OK",CR   
40A7   57 48 41 54 3F 0D WHAT:   DB   "WHAT?",CR   
40AD   53 4F 52 52 59 0D SORRY:   DB   "SORRY",CR   
40B3                             ;*************************************************************
40B3                             ; 
40B3                             ; *** MAIN ***
40B3                             ; 
40B3                             ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
40B3                             ; AND STORES IT IN THE MEMORY.
40B3                             ; 
40B3                             ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
40B3                             ; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
40B3                             ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
40B3                             ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
40B3                             ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
40B3                             ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
40B3                             ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
40B3                             ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
40B3                             ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
40B3                             ; 
40B3                             ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
40B3                             ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
40B3                             ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
40B3                             ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
40B3                             ; 
40B3                             ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
40B3                             ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
40B3                             ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
40B3                             ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
40B3                             ; 
40B3                             ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
40B3                             ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
40B3                             ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
40B3                             ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
40B3                             ;*************************************************************
40B3                RSTART:      
40B3   31 FF 3E               LD   SP,STACK   
40B6                ST1:         
40B6   3E FF                  LD   A,0FFH   
40B8   32 C0 17               LD   (OCSW),A   ;ENSURE OUTPUT IS ON
40BB   CD 0E 40               CALL   CRLF   ;AND JUMP TO HERE
40BE   11 A4 40               LD   DE,OK   ;DE->STRING
40C1   97                     SUB   A   ;A=0
40C2   CD C3 45               CALL   PRTSTG   ;PRINT STRING UNTIL CR
40C5   21 CC 40               LD   HL,ST2+1   ;LITERAL 0 STORED AT STG+1
40C8   22 C1 17               LD   (CURRNT),HL   ;CURRENT->LINE # = 0
40CB                ST2:         
40CB   21 00 00               LD   HL,0000H   
40CE   22 C9 17               LD   (LOPVAR),HL   
40D1   22 C3 17               LD   (STKGOS),HL   
40D4                ST3:         
40D4   3E 3E                  LD   A,">"   ;PROMPT ">" AND
40D6   CD 61 45               CALL   GETLN   ;READ A LINE
40D9   D5                     PUSH   DE   ;DE->END OF LINE
40DA   11 37 3E               LD   DE,BUFFER   ;DE->BEGINNING OF LINE
40DD   CD 6F 40               CALL   TSTNUM   ;TEST IF IT IS A NUMBER
40E0   CD 25 40               CALL   RST28TB   
40E3   7C                     LD   A,H   ;HL=VALUE OF THE # OR
40E4   B5                     OR   L   ;0 IF NO # WAS FOUND
40E5   C1                     POP   BC   ;BC->END OF LINE
40E6   CA 4A 48               JP   Z,DIRECT   
40E9   1B                     DEC   DE   ;BACKUP DE AND SAVE
40EA   7C                     LD   A,H   ;VALUE OF LINE # THERE
40EB   12                     LD   (DE),A   
40EC   1B                     DEC   DE   
40ED   7D                     LD   A,L   
40EE   12                     LD   (DE),A   
40EF   C5                     PUSH   BC   ;BC,DE->BEGIN, END
40F0   D5                     PUSH   DE   
40F1   79                     LD   A,C   
40F2   93                     SUB   E   
40F3   F5                     PUSH   AF   ;A=# OF BYTES IN LINE
40F4   CD 9C 45               CALL   FNDLN   ;FIND THIS LINE IN SAVE
40F7   D5                     PUSH   DE   ;AREA, DE->SAVE AREA
40F8   20 10                  JR   NZ,ST4   ;NZ:NOT FOUND, INSERT
40FA   D5                     PUSH   DE   ;Z:FOUND, DELETE IT
40FB   CD B9 45               CALL   FNDNXT   ;FIND NEXT LINE
40FE                             ;DE->NEXT LINE
40FE   C1                     POP   BC   ;BC->LINE TO BE DELETED
40FF   2A D5 17               LD   HL,(TXTUNF)   ;HL->UNFILLED SAVE AREA
4102   CD 99 46               CALL   MVUP1   ;MOVE UP TO DELETE
4105   60                     LD   H,B   ;TXTUNF->UNFILLED ARA
4106   69                     LD   L,C   
4107   22 D5 17               LD   (TXTUNF),HL   ;UPDATE
410A                ST4:         
410A   C1                     POP   BC   ;GET READY TO INSERT
410B   2A D5 17               LD   HL,(TXTUNF)   ;BUT FIRST CHECK IF
410E   F1                     POP   AF   ;THE LENGTH OF NEW LINE
410F   E5                     PUSH   HL   ;IS 3 (LINE # AND CR)
4110   FE 03                  CP   CTRLC   ;THEN DO NOT INSERT
4112   28 9F                  JR   Z,RSTART   ;MUST CLEAR THE STACK
4114   85                     ADD   A,L   ;COMPUTE NEW TXTUNF
4115   6F                     LD   L,A   
4116   3E 00                  LD   A,00H   
4118   8C                     ADC   A,H   
4119   67                     LD   H,A   ;HL->NEW UNFILLED AREA
411A   11 00 3E               LD   DE,TXTEND   ;CHECK TO SEE IF THERE
411D   CD 1F 40               CALL   RST20TB   ;IS ENOUGH SPACE
4120   D2 5B 45               JP   NC,QSORRY   ;SORRY, NO ROOM FOR IT
4123   22 D5 17               LD   (TXTUNF),HL   ;OK, UPDATE TXTUNF
4126   D1                     POP   DE   ;DE->OLD UNFILLED AREA
4127   CD A3 46               CALL   MVDOWN   
412A   D1                     POP   DE   ;DE->BEGIN, HL->END
412B   E1                     POP   HL   
412C   CD 99 46               CALL   MVUP1   ;MOVE NEW LINE TO SAVE
412F   18 A3                  JR   ST3   ;AREA
4131                             ;*************************************************************
4131                             ; 
4131                             ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
4131                             ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
4131                             ; COMMAND TABLE LOOKUP CODE OF "DIRECT" AND "EXEC" IN LAST
4131                             ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
4131                             ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
4131                             ; 
4131                             ; FOR "LIST", "NEW", AND "STOP": GO BACK TO "RSTART"
4131                             ; FOR "RUN": GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
4131                             ; GO BACK TO "RSTART".
4131                             ; FOR "GOTO" AND "GOSUB": GO EXECUTE THE TARGET LINE.
4131                             ; FOR "RETURN" AND "NEXT": GO BACK TO SAVED RETURN LINE.
4131                             ; FOR ALL OTHERS: IF "CURRENT" -> 0, GO TO "RSTART", ELSE
4131                             ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN "FINISH".)
4131                             ;*************************************************************
4131                             ; 
4131                             ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
4131                             ; 
4131                             ; "NEW(CR)" SETS "TXTUNF" TO POINT TO "TXTBGN"
4131                             ; 
4131                             ; "STOP(CR)" GOES BACK TO "RSTART"
4131                             ; 
4131                             ; "RUN(CR)" FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
4131                             ; "CURRENT"), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
4131                             ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
4131                             ; 
4131                             ; THERE ARE 3 MORE ENTRIES IN "RUN":
4131                             ; "RUNNXL" FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
4131                             ; "RUNTSL" STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
4131                             ; "RUNSML" CONTINUES THE EXECUTION ON SAME LINE.
4131                             ; 
4131                             ; "GOTO EXPR(CR)" EVALUATES THE EXPRESSION, FIND THE TARGET
4131                             ; LINE, AND JUMP TO "RUNTSL" TO DO IT.
4131                             ;*************************************************************
4131                NEW:         
4131   CD 26 45               CALL   ENDCHK   ;*** NEW(CR) ***
4134   21 D7 17               LD   HL,TXTBGN   
4137   22 D5 17               LD   (TXTUNF),HL   
413A                STOP:        
413A   CD 26 45               CALL   ENDCHK   ;*** STOP(CR) ***
413D   C3 B3 40               JP   RSTART   
4140                RUN:         
4140   CD 26 45               CALL   ENDCHK   ;*** RUN(CR) ***
4143   11 D7 17               LD   DE,TXTBGN   ;FIRST SAVED LINE
4146                RUNNXL:      
4146   21 00 00               LD   HL,00H   ;*** RUNNXL ***
4149   CD A4 45               CALL   FNDLP   ;FIND WHATEVER LINE #
414C   DA B3 40               JP   C,RSTART   ;C:PASSED TXTUNF, QUIT
414F                RUNTSL:      
414F   EB                     EX   DE,HL   ;*** RUNTSL ***
4150   22 C1 17               LD   (CURRNT),HL   ;SET "CURRENT"->LINE #
4153   EB                     EX   DE,HL   
4154   13                     INC   DE   ;BUMP PASS LINE #
4155   13                     INC   DE   
4156                RUNSML:      
4156   CD 53 47               CALL   CHKIO   ;*** RUNSML ***
4159   21 B9 47               LD   HL,TAB2-1   ;FIND COMMAND IN TAB2
415C   C3 4D 48               JP   EXEC   ;AND EXECUTE IT
415F                GOTO:        
415F   CD 18 40               CALL   RST18TB   ;*** GOTO EXPR ***
4162   D5                     PUSH   DE   ;SAVE FOR ERROR ROUTINE
4163   CD 26 45               CALL   ENDCHK   ;MUST FIND A CR
4166   CD 9C 45               CALL   FNDLN   ;FIND THE TARGET LINE
4169   C2 99 40               JP   NZ,AHOW   ;NO SUCH LINE #
416C   F1                     POP   AF   ;CLEAR THE PUSH DE
416D   18 E0                  JR   RUNTSL   ;GO DO IT
416F                             ;*************************************************************
416F                             ; 
416F                             ; *** LIST *** & PRINT ***
416F                             ; 
416F                             ; LIST HAS TWO FORMS:
416F                             ; "LIST(CR)" LISTS ALL SAVED LINES
416F                             ; "LIST #(CR)" START LIST AT THIS LINE #
416F                             ; YOU CAN STOP THE LISTING BY CONTROL C KEY
416F                             ; 
416F                             ; PRINT COMMAND IS "PRINT ....;" OR "PRINT ....(CR)"
416F                             ; WHERE "...." IS A LIST OF EXPRESIONS, FORMATS, BACK-
416F                             ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
416F                             ; 
416F                             ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
416F                             ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
416F                             ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
416F                             ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
416F                             ; SPECIFIED, 6 POSITIONS WILL BE USED.
416F                             ; 
416F                             ; IF A & IS THE FIRST CHARACTER, THE NUMBER FOLLOWING IS
416F                             ; PRINTED AS HEXADECIMAL.  IF NUMBER IS GREATER THAN 255
416F                             ; THEN H IS PRINTED FIRST THEN L WITH NO SPACE BETWEEN
416F                             ; 
416F                             ; IF A % IS THE FIRST CHARACTER, THE NUMBER IS PRINTED
416F                             ; AS AN ASCII CHARCTER.  IF THE CARACTER IS NOT PRINTABLE
416F                             ; A "." WILL BE PRINTED.
416F                             ; 
416F                             ; IF A $ IS THE FIRST CHARACTER, THE NUMBER IS PRINTED
416F                             ; AS AN ASCII CHARCTER BUT ALL ASCII CHARACTERS ARE PRINTED
416F                             ; BETWEEN 0 AND 128
416F                             ; 
416F                             ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
416F                             ; DOUBLE QUOTES.
416F                             ; 
416F                             ; A UNDERSCORE MEANS GENERATE A (CR) WITHOUT (LF)
416F                             ; 
416F                             ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
416F                             ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
416F                             ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
416F                             ;*************************************************************
416F                LIST:        
416F   CD 6F 40               CALL   TSTNUM   ;TEST IF THERE IS A #
4172   CD 26 45               CALL   ENDCHK   ;IF NO # WE GET A 0
4175   CD 9C 45               CALL   FNDLN   ;FIND THIS OR NEXT LINE
4178                LS1:         
4178   DA B3 40               JP   C,RSTART   ;C:PASSED TXTUNF
417B   CD 58 46               CALL   PRTLN   ;PRINT THE LINE
417E   CD 53 47               CALL   CHKIO   ;STOP IF HIT CONTROL-C
4181   CD A4 45               CALL   FNDLP   ;FIND NEXT LINE
4184   18 F2                  JR   LS1   ;AND LOOP BACK
4186                PRINT:       
4186   0E 06                  LD   C,06H   ;C = # OF SPACES
4188   CD 06 40               CALL   RST08TB   ;F NULL LIST & ";"
418B   3B                     DB   ";"   
418C   05                     DB   PR2-$-1   
418D   CD 0E 40               CALL   CRLF   ;GIVE CR-LF AND
4190   18 C4                  JR   RUNSML   ;CONTINUE SAME LINE
4192                PR2:         
4192   CD 06 40               CALL   RST08TB   ;IF NULL LIST (CR)
4195   0D                     DB   CR   
4196   05                     DB   PR0-$-1   
4197   CD 0E 40               CALL   CRLF   ;ALSO GIVE CR-LF AND
419A   18 AA                  JR   RUNNXL   ;GO TO NEXT LINE
419C                PR0:         
419C   CD 06 40               CALL   RST08TB   ;ELSE IS IT FORMAT?
419F   23                     DB   "#"   
41A0   06                     DB   PR9-$-1   
41A1   CD 18 40               CALL   RST18TB   ;YES, EVALUATE EXPR.
41A4   4D                     LD   C,L   ;AND SAVE IT IN C
41A5   18 2C                  JR   PR3   ;LOOK FOR MORE TO PRINT
41A7                PR9:         
41A7   CD 06 40               CALL   RST08TB   ;ELSE IS IT PRINT AS HEXIDECIMAL?
41AA   26                     DB   "&"   
41AB   08                     DB   PR10-$-1   
41AC   CD 18 40               CALL   RST18TB   ;YES, EVALUATE EXPR.
41AF   CD 7D 46               CALL   PRTHEX   
41B2   18 1F                  JR   PR3   
41B4                PR10:        
41B4   CD 06 40               CALL   RST08TB   ;ELSE IS IT PRINT AS ASCII?
41B7   25                     DB   "%"   ;FOR ASCII PRINTING?
41B8   08                     DB   PR11-$-1   
41B9   CD 18 40               CALL   RST18TB   ;YES, EVALUATE EXPR.
41BC   CD 70 46               CALL   PRTASC   ;PRINT ONLY PRINTABLE ASCII
41BF   18 12                  JR   PR3   
41C1                PR11:        
41C1   CD 06 40               CALL   RST08TB   ;ELSE IS IT CHR$?
41C4   24                     DB   "$"   
41C5   08                     DB   PR1-$-1   
41C6   CD 18 40               CALL   RST18TB   ;YES, EVALUATE EXPR.
41C9   CD 6C 46               CALL   PRTCHR   ;PRINT THE ASCII VALUE
41CC   18 05                  JR   PR3   
41CE                PR1:         
41CE   CD E9 45               CALL   QTSTG   ;OR IS IT A STRING?
41D1   18 10                  JR   PR8   ;IF NOT, MUST BE EXPR.
41D3                PR3:         
41D3   CD 06 40               CALL   RST08TB   ;IF ",", GO FIND NEXT
41D6   2C                     DB   ","   
41D7   05                     DB   PR6-$-1   
41D8   CD 13 45               CALL   FIN   ;IN THE LIST.
41DB   18 BF                  JR   PR0   ;LIST CONTINUES
41DD                PR6:         
41DD   CD 0E 40               CALL   CRLF   ;LIST ENDS
41E0   CD 2C 40               CALL   RST30TB   
41E3                PR8:         
41E3   CD 18 40               CALL   RST18TB   ;EVALUATE THE EXPR
41E6   C5                     PUSH   BC   
41E7   CD 18 46               CALL   PRTNUM   ;PRINT THE VALUE
41EA   C1                     POP   BC   
41EB   18 E6                  JR   PR3   ;MORE TO PRINT?
41ED                             ;*************************************************************
41ED                             ; 
41ED                             ; *** GOSUB *** & RETURN ***
41ED                             ; 
41ED                             ; "GOSUB EXPR;" OR "GOSUB EXPR (CR)" IS LIKE THE "GOTO"
41ED                             ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
41ED                             ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
41ED                             ; SUBROUTINE "RETURN".  IN ORDER THAT "GOSUB" CAN BE NESTED
41ED                             ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
41ED                             ; THE STACK POINTER IS SAVED IN "STKGOS", THE OLD "STKGOS" IS
41ED                             ; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, "STKGOS"
41ED                             ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
41ED                             ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER "RETURN"S.
41ED                             ; 
41ED                             ; "RETURN(CR)" UNDOS EVERYTHING THAT "GOSUB" DID, AND THUS
41ED                             ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
41ED                             ; "GOSUB".  IF "STKGOS" IS ZERO, IT INDICATES THAT WE
41ED                             ; NEVER HAD A "GOSUB" AND IS THUS AN ERROR.
41ED                             ;*************************************************************
41ED                GOSUB:       
41ED   CD CC 46               CALL   PUSHA   ;SAVE THE CURRENT "FOR"
41F0   CD 18 40               CALL   RST18TB   ;PARAMETERS
41F3   D5                     PUSH   DE   ;AND TEXT POINTER
41F4   CD 9C 45               CALL   FNDLN   ;FIND THE TARGET LINE
41F7   C2 99 40               JP   NZ,AHOW   ;NOT THERE. SAY "HOW?"
41FA   2A C1 17               LD   HL,(CURRNT)   ;FOUND IT, SAVE OLD.
41FD   E5                     PUSH   HL   ;"CURRNT" OLD "STKGOS"
41FE   2A C3 17               LD   HL,(STKGOS)   
4201   E5                     PUSH   HL   
4202   21 00 00               LD   HL,0000H   ;AND LOAD NEW ONES
4205   22 C9 17               LD   (LOPVAR),HL   
4208   39                     ADD   HL,SP   
4209   22 C3 17               LD   (STKGOS),HL   
420C   C3 4F 41               JP   RUNTSL   ;THEN RUN THAT LINE
420F                RETURN:      
420F   CD 26 45               CALL   ENDCHK   ;THERE MUST BE A CR
4212   2A C3 17               LD   HL,(STKGOS)   ;OLD STACK POINTER
4215   7C                     LD   A,H   ;0 MEANS NOT EXIST
4216   B5                     OR   L   
4217   CA 2C 45               JP   Z,QWHAT   ;SO, WE SAY: "WHAT?"
421A   F9                     LD   SP,HL   ;ELSE, RESTORE IT
421B   E1                     POP   HL   
421C   22 C3 17               LD   (STKGOS),HL   ;AND THE OLD "STKGOS"
421F   E1                     POP   HL   
4220   22 C1 17               LD   (CURRNT),HL   ;AND THE OLD "CURRNT"
4223   D1                     POP   DE   ;OLD TEXT POINTER
4224   CD B1 46               CALL   POPA   ;OLD "FOR" PARAMETERS
4227   CD 2C 40               CALL   RST30TB   ;AND WE ARE BACK HOME
422A                             ;*************************************************************
422A                             ; 
422A                             ; *** FOR *** & NEXT ***
422A                             ; 
422A                             ; "FOR" HAS TWO FORMS:
422A                             ; "FOR VAR=EXP1 TO EXP2 STEP EXP3" AND "FOR VAR=EXP1 TO EXP2"
422A                             ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
422A                             ; EXP3=1.  (I.E., WITH A STEP OF +1.)
422A                             ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
422A                             ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
422A                             ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
422A                             ; THE "FOR" SAVE AREA, WHICH CONSISTS OF "LOPVAR", "LOPINC",
422A                             ; "LOPLMT", "LOPLN", AND "LOPPT".  IF THERE IS ALREADY SOME-
422A                             ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
422A                             ; "LOPVAR"), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
422A                             ; BEFORE THE NEW ONE OVERWRITES IT.
422A                             ; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
422A                             ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE "FOR" LOOP.
422A                             ; IF THAT IS THE CASE, THEN THE OLD "FOR" LOOP IS DEACTIVATED.
422A                             ; (PURGED FROM THE STACK..)
422A                             ; 
422A                             ; "NEXT VAR" SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
422A                             ; END OF THE "FOR" LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
422A                             ; WITH THE "LOPVAR".  IF THEY ARE NOT THE SAME, TBI DIGS IN
422A                             ; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
422A                             ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE "STEP" TO
422A                             ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
422A                             ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
422A                             ; FOLLOWING THE "FOR".  IF OUTSIDE THE LIMIT, THE SAVE AREA
422A                             ; IS PURGED AND EXECUTION CONTINUES.
422A                             ;*************************************************************
422A                FOR:         
422A   CD CC 46               CALL   PUSHA   ;SAVE THE OLD SAVE AREA
422D   CD FA 44               CALL   SETVAL   ;SET THE CONTROL VAR.
4230   2B                     DEC   HL   ;HL IS ITS ADDRESS
4231   22 C9 17               LD   (LOPVAR),HL   ;SAVE THAT
4234   21 25 48               LD   HL,TAB5-1   ;USE "EXEC" TO LOOK
4237   C3 4D 48               JP   EXEC   ;FOR THE WORK "TO"
423A                FR1:         
423A   CD 18 40               CALL   RST18TB   ;EVALUATE THE LIMITE
423D   22 CD 17               LD   (LOPLMT),HL   ;SAVE THAT
4240   21 2B 48               LD   HL,TAB6-1   ;USE "EXEC" TO LOOK
4243   C3 4D 48               JP   EXEC   ;FOR THE WORD "STEP"
4246                FR2:         
4246   CD 18 40               CALL   RST18TB   ;FOUND IT, GET STEP
4249   18 03                  JR   FR4   
424B                FR3:         
424B   21 01 00               LD   HL,0001H   ;NOT FOUND, SET TO 1
424E                FR4:         
424E   22 CB 17               LD   (LOPINC),HL   ;SAVE THAT TOO
4251                FR5:         
4251   2A C1 17               LD   HL,(CURRNT)   ;SAVE CURRENT LINE #
4254   22 CF 17               LD   (LOPLN),HL   
4257   EB                     EX   DE,HL   ;AND TEXT POINTER
4258   22 D1 17               LD   (LOPPT),HL   
425B   01 0A 00               LD   BC,0AH   ;DIG INTO STACK TO
425E   2A C9 17               LD   HL,(LOPVAR)   ;FIND "LOPVAR"
4261   EB                     EX   DE,HL   
4262   60                     LD   H,B   
4263   68                     LD   L,B   ;HL=0 NOW
4264   39                     ADD   HL,SP   ;HERE IS THE STACK
4265                FR7:         
4265   09                     ADD   HL,BC   ;EACH LEVEL IS 10 DEEP - DIS = 09
4266   7D                     LD   A,L   
4267   81                     ADD   A,C   
4268   38 18                  JR   C,FR8   
426A   7E                     LD   A,(HL)   
426B   2B                     DEC   HL   
426C   BA                     CP   D   ;SAME AS THIS ONE?
426D   20 F6                  JR   NZ,FR7   
426F   7E                     LD   A,(HL)   ;THE OTHER HALF?
4270   BB                     CP   E   
4271   20 F2                  JR   NZ,FR7   
4273   EB                     EX   DE,HL   ;YES, FOUND ONE
4274   21 00 00               LD   HL,0000H   
4277   39                     ADD   HL,SP   ;TRY TO MOVE SP
4278   44                     LD   B,H   
4279   4D                     LD   C,L   
427A   21 0A 00               LD   HL,000AH   
427D   19                     ADD   HL,DE   
427E   CD A3 46               CALL   MVDOWN   ;AND PURGE 10 WORDS
4281   F9                     LD   SP,HL   ;IN THE STACK
4282                FR8:         
4282   2A D1 17               LD   HL,(LOPPT)   ;JOB DONE, RESTORE DE
4285   EB                     EX   DE,HL   
4286   CD 2C 40               CALL   RST30TB   ;AND CONTINUE
4289                             ; 
4289                NEXT:        
4289   CD 33 40               CALL   RST38TB   ;GET ADDRESS OF VAR.
428C   DA 2C 45               JP   C,QWHAT   ;NO VARIABLE, "WHAT?"
428F   22 C5 17               LD   (VARNXT),HL   ;YES, SAVE IT
4292                NX0:         
4292   D5                     PUSH   DE   ;SAVE TEXT POINTER
4293   EB                     EX   DE,HL   
4294   2A C9 17               LD   HL,(LOPVAR)   ;GET VAR. IN "FOR"
4297   7C                     LD   A,H   
4298   B5                     OR   L   ;0 SAYS NEVER HAD ONE
4299   CA 2D 45               JP   Z,AWHAT   ;SO WE ASK: "WHAT?"
429C   CD 1F 40               CALL   RST20TB   ;ELSE WE CHECK THEM
429F   28 09                  JR   Z,NX3   ;OK, THEY AGREE
42A1   D1                     POP   DE   ;NO, LET'S SEE
42A2   CD B1 46               CALL   POPA   ;PURGE CURRENT LOOP
42A5   2A C5 17               LD   HL,(VARNXT)   ;AND POP ONE LEVEL
42A8   18 E8                  JR   NX0   ;GO CHECK AGAIN
42AA                NX3:         
42AA   5E                     LD   E,(HL)   ;COME HERE WHEN AGREED
42AB   23                     INC   HL   
42AC   56                     LD   D,(HL)   ;DE=VALUE OF VAR.
42AD   2A CB 17               LD   HL,(LOPINC)   
42B0   E5                     PUSH   HL   
42B1   7C                     LD   A,H   
42B2   AA                     XOR   D   
42B3   7A                     LD   A,D   
42B4   19                     ADD   HL,DE   ;ADD ONE STEP
42B5   FA BC 42               JP   M,NX4   
42B8   AC                     XOR   H   
42B9   FA DF 42               JP   M,NX5   
42BC                NX4:         
42BC   EB                     EX   DE,HL   
42BD   2A C9 17               LD   HL,(LOPVAR)   ;PUT IT BACK
42C0   73                     LD   (HL),E   
42C1   23                     INC   HL   
42C2   72                     LD   (HL),D   
42C3   2A CD 17               LD   HL,(LOPLMT)   ;HL->LIMIT
42C6   F1                     POP   AF   ;OLD HL
42C7   B7                     OR   A   
42C8   F2 CC 42               JP   P,NX1   ;STEP > 0
42CB   EB                     EX   DE,HL   ;STEP < 0
42CC                NX1:         
42CC   CD F1 44               CALL   CKHLDE   ;COMPARE WITH LIMIT
42CF   D1                     POP   DE   ;RESTORE TEXT POINTER
42D0   38 0F                  JR   C,NX2   ;OUTSIDE LIMIT
42D2   2A CF 17               LD   HL,(LOPLN)   ;WITHIN LIMIT, GO
42D5   22 C1 17               LD   (CURRNT),HL   ;BACK TO THE SAVED
42D8   2A D1 17               LD   HL,(LOPPT)   ;"CURRNT" AND TEXT
42DB   EB                     EX   DE,HL   ;POINTER
42DC   CD 2C 40               CALL   RST30TB   
42DF                NX5:         
42DF   E1                     POP   HL   
42E0   D1                     POP   DE   
42E1                NX2:         
42E1   CD B1 46               CALL   POPA   ;PURGE THIS LOOP
42E4   CD 2C 40               CALL   RST30TB   
42E7                             ;*************************************************************
42E7                             ; 
42E7                             ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
42E7                             ; 
42E7                             ; "REM" CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
42E7                             ; TBI TREATS IT LIKE AN "IF" WITH A FALSE CONDITION.
42E7                             ; 
42E7                             ; "IF" IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
42E7                             ; COMMANDS (INCLUDING OTHER "IF"S) SEPERATED BY SEMI-COLONS.
42E7                             ; NOTE THAT THE WORD "THEN" IS NOT USED.  TBI EVALUATES THE
42E7                             ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
42E7                             ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
42E7                             ; EXECUTION CONTINUES AT THE NEXT LINE.
42E7                             ; 
42E7                             ; "INPUT" COMMAND IS LIKE THE "PRINT" COMMAND, AND IS FOLLOWED
42E7                             ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
42E7                             ; DOUBLE QUOTES, OR IS A UNDERSCORE, IT HAS THE SAME EFFECT AS
42E7                             ; IN "PRINT".  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
42E7                             ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
42E7                             ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
42E7                             ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
42E7                             ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
42E7                             ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
42E7                             ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
42E7                             ; 
42E7                             ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
42E7                             ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
42E7                             ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
42E7                             ; THIS IS HANDLED IN "INPERR".
42E7                             ; 
42E7                             ; "LET" IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
42E7                             ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
42E7                             ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
42E7                             ; TBI WILL ALSO HANDLE "LET" COMMAND WITHOUT THE WORD "LET".
42E7                             ; THIS IS DONE BY "DEFLT".
42E7                             ;*************************************************************
42E7                REM:         
42E7   21 00 00               LD   HL,0000H   ;*** REM ***
42EA   18 03                  JR   IF1   
42EC                IFF:         
42EC   CD 18 40               CALL   RST18TB   ;*** IF ***
42EF                IF1:         
42EF   7C                     LD   A,H   ;IS THE EXPR.=0?
42F0   B5                     OR   L   
42F1   C2 56 41               JP   NZ,RUNSML   ;NO, CONTINUE
42F4   CD BB 45               CALL   FNDSKP   ;YES, SKIP REST OF LINE
42F7   D2 4F 41               JP   NC,RUNTSL   ;AND RUN THE NEXT LINE
42FA   C3 B3 40               JP   RSTART   ;IF NO NEXT, RE-START
42FD                INPERR:      
42FD   2A C7 17               LD   HL,(STKINP)   ;*** INPERR ***
4300   F9                     LD   SP,HL   ;RESTORE OLD SP
4301   E1                     POP   HL   ;AND OLD "CURRNT"
4302   22 C1 17               LD   (CURRNT),HL   
4305   D1                     POP   DE   ;AND OLD TEXT POINTER
4306   D1                     POP   DE   ;REDO INPUT
4307                INPUT:       ;*** INPUT ***
4307                IP1:         
4307   D5                     PUSH   DE   ;SAVE IN CASE OF ERROR
4308   CD E9 45               CALL   QTSTG   ;IS NEXT ITEM A STRING?
430B   18 07                  JR   IP2   ;NO
430D   CD 33 40               CALL   RST38TB   ;YES, BUT FOLLOWED BY A
4310   38 40                  JR   C,IP4   ;VARIABLE? NO.
4312   18 12                  JR   IP3   ;YES. INPUT VARIABLE
4314                IP2:         
4314   D5                     PUSH   DE   ;SAVE FOR "PRTSTG"
4315   CD 33 40               CALL   RST38TB   ;MUST BE VARIABLE NOW
4318   DA 2C 45               JP   C,QWHAT   ;"WHAT?" IT IS NOT?
431B   1A                     LD   A,(DE)   ;GET READY FOR "PRTSTR"
431C   4F                     LD   C,A   
431D   97                     SUB   A   
431E   12                     LD   (DE),A   
431F   D1                     POP   DE   
4320   CD C3 45               CALL   PRTSTG   ;PRINT STRING AS PROMPT
4323   79                     LD   A,C   ;RESTORE TEXT
4324   1B                     DEC   DE   
4325   12                     LD   (DE),A   
4326                IP3:         
4326   D5                     PUSH   DE   ;SAVE TEXT POINTER
4327   EB                     EX   DE,HL   
4328   2A C1 17               LD   HL,(CURRNT)   ;ALSO SAVE "CURRNT"
432B   E5                     PUSH   HL   
432C   21 07 43               LD   HL,IP1   ;A NEGATIVE NUMBER
432F   22 C1 17               LD   (CURRNT),HL   ;AS A FLAG
4332   21 00 00               LD   HL,0000H   ;SAVE SP TOO
4335   39                     ADD   HL,SP   
4336   22 C7 17               LD   (STKINP),HL   
4339   D5                     PUSH   DE   ;OLD HL
433A   3E 3A                  LD   A,3AH   ;PRINT THIS TOO
433C   CD 61 45               CALL   GETLN   ;AND GET A LINE
433F   11 37 3E               LD   DE,BUFFER   ;POINTS TO BUFFER
4342   CD 18 40               CALL   RST18TB   ;EVALUATE INPUT
4345   00                     NOP      ;CAN BE "CALL ENDCHK"
4346   00                     NOP      
4347   00                     NOP      
4348   D1                     POP   DE   ;OK,GET OLD HL
4349   EB                     EX   DE,HL   
434A   73                     LD   (HL),E   ;SAVE VALUE IN VAR.
434B   23                     INC   HL   
434C   72                     LD   (HL),D   
434D   E1                     POP   HL   ;GET OLD "CURRNT"
434E   22 C1 17               LD   (CURRNT),HL   
4351   D1                     POP   DE   ;AND OLD TEXT POINTER
4352                IP4:         
4352   F1                     POP   AF   ;PURGE JUNK IN STACK
4353   CD 06 40               CALL   RST08TB   ;IS NEXT CH. ","?
4356   2C                     DB   ","   
4357   02                     DB   IP5-$-1   
4358   18 AD                  JR   IP1   ;YES, MORE ITEMS.
435A                IP5:         
435A   CD 2C 40               CALL   RST30TB   
435D                DEFLT:       
435D   1A                     LD   A,(DE)   ;***  DEFLT ***
435E   FE 0D                  CP   CR   ;EMPTY LINE IS OK
4360   28 0A                  JR   Z,LT1   ;ELSE IT IS "LET"
4362                LET:         
4362   CD FA 44               CALL   SETVAL   ;*** LET ***
4365   CD 06 40               CALL   RST08TB   ;SET VALUE TO VAR
4368   2C                     DB   ","   ;IS NEXT CH. ","?
4369   02                     DB   LT1-$-1   
436A   18 F6                  JR   LET   ;ITEM BY ITEM
436C                LT1:         
436C   CD 2C 40               CALL   RST30TB   ;UNTIL FINISH
436F                             ;*************************************************************
436F                             ; 
436F                             ; *** EXPR ***
436F                             ; 
436F                             ; "EXPR" EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
436F                             ; <EXPR>::<EXPR2>
436F                             ;         <EXPR2><REL.OP.><EXPR2>
436F                             ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
436F                             ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
436F                             ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
436F                             ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
436F                             ; <EXPR3>::=<EXPR4>(* OR /)<EXPR4>(....)
436F                             ; <EXPR4>::=<VARIABLE>
436F                             ;           <FUNCTION>
436F                             ;           (<EXPR>)
436F                             ; <EXPR> IS RECURSIVE SO THAT VARIABLE "@" CAN HAVE AN <EXPR>
436F                             ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
436F                             ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
436F                             ;*************************************************************
436F                EXPR1:       
436F   21 33 48               LD   HL,TAB8-1   ;LOOKUP REL.OP.
4372   C3 4D 48               JP   EXEC   ;GO DO IT
4375                XP11:        
4375   CD 9E 43               CALL   XP18   ;REL.OP.">="
4378   D8                     RET   C   ;NO, RETURN HL=0
4379   6F                     LD   L,A   ;YES, RETURN HL=1
437A   C9                     RET      
437B                XP12:        
437B   CD 9E 43               CALL   XP18   ;REL.OP."#"
437E   C8                     RET   Z   ;FALSE, RETURN HL=0
437F   6F                     LD   L,A   ;TRUE, RETURN HL=1
4380   C9                     RET      
4381                XP13:        
4381   CD 9E 43               CALL   XP18   ;REL.OP.">"
4384   C8                     RET   Z   ;FALSE
4385   D8                     RET   C   ;ALSO FALSE, HL=0
4386   6F                     LD   L,A   ;TRUE, HL=1
4387   C9                     RET      
4388                XP14:        
4388   CD 9E 43               CALL   XP18   ;REL.OP."<="
438B   6F                     LD   L,A   ;SET HL=1
438C   C8                     RET   Z   ;REL. TRUE, RETURN
438D   D8                     RET   C   
438E   6C                     LD   L,H   ;ELSE SET HL=0
438F   C9                     RET      
4390                XP15:        
4390   CD 9E 43               CALL   XP18   ;REL.OP."="
4393   C0                     RET   NZ   ;FALSE, RETURN HL=0
4394   6F                     LD   L,A   ;ELSE SET HL=1
4395   C9                     RET      
4396                XP16:        
4396   CD 9E 43               CALL   XP18   ;REL.OP."<"
4399   D0                     RET   NC   ;FALSE, RETURN HL=0
439A   6F                     LD   L,A   ;ELSE SET HL=1
439B   C9                     RET      
439C                XP17:        
439C   E1                     POP   HL   ;NOT .REL.OP
439D   C9                     RET      ;RETURN HL=<EXPR2>
439E                XP18:        
439E   79                     LD   A,C   ;SUBROUTINE FOR ALL
439F   E1                     POP   HL   ;REL.OP.'S
43A0   C1                     POP   BC   
43A1   E5                     PUSH   HL   ;REVERSE TOP OF STACK
43A2   C5                     PUSH   BC   
43A3   4F                     LD   C,A   
43A4   CD B3 43               CALL   EXPR2   ;GET 2ND <EXPR2>
43A7   EB                     EX   DE,HL   ;VALUE IN DE NOW
43A8   E3                     EX   (SP),HL   ;1ST <EXPR2> IN HL
43A9   CD F1 44               CALL   CKHLDE   ;COMPARE 1ST WITH 2ND
43AC   D1                     POP   DE   ;RESTORE TEXT POINTER
43AD   21 00 00               LD   HL,0000H   ;SET HL=0, A=1
43B0   3E 01                  LD   A,01H   
43B2   C9                     RET      
43B3                EXPR2:       
43B3   CD 06 40               CALL   RST08TB   ;NEGATIVE SIGN?
43B6   2D                     DB   "-"   
43B7   05                     DB   XP21-$-1   
43B8   21 00 00               LD   HL,0000H   ;YES, FAKE "0-"
43BB   18 27                  JR   XP26   ;TREAT LIKE SUBTRACT
43BD                XP21:        
43BD   CD 06 40               CALL   RST08TB   ;POSITIVE SIGN? IGNORE
43C0   2B                     DB   "+"   
43C1   00                     DB   XP22-$-1   
43C2                XP22:        
43C2   CD ED 43               CALL   EXPR3   ;1ST <EXPR3>
43C5                XP23:        
43C5   CD 06 40               CALL   RST08TB   ;ADD?
43C8   2B                     DB   "+"   
43C9   15                     DB   XP25-$-1   
43CA   E5                     PUSH   HL   ;YES, SAVE VALUE
43CB   CD ED 43               CALL   EXPR3   ;GET 2ND <EXPR3>
43CE                XP24:        
43CE   EB                     EX   DE,HL   ;2ND IN DE
43CF   E3                     EX   (SP),HL   ;1ST IN HL
43D0   7C                     LD   A,H   ;COMPARE SIGN
43D1   AA                     XOR   D   
43D2   7A                     LD   A,D   
43D3   19                     ADD   HL,DE   
43D4   D1                     POP   DE   ;RESTORE TEXT POINTER
43D5   FA C5 43               JP   M,XP23   ;1ST AND 2ND SIGN DIFFER
43D8   AC                     XOR   H   ;1ST AND 2ND SIGN EQUAL
43D9   F2 C5 43               JP   P,XP23   ;SO IS RESULT
43DC   C3 98 40               JP   QHOW   ;ELSE WE HAVE OVERFLOW
43DF                XP25:        
43DF   CD 06 40               CALL   RST08TB   ;SUBTRACT?
43E2   2D                     DB   "-"   
43E3   8B                     DB   XP42-$-1   
43E4                XP26:        
43E4   E5                     PUSH   HL   ;YES, SAVE 1ST <EXPR3>
43E5   CD ED 43               CALL   EXPR3   ;GET 2ND <EXPR3>
43E8   CD DC 44               CALL   CHGSGN   ;NEGATE
43EB   18 E1                  JR   XP24   ;AND ADD THEM
43ED                             ; 
43ED                EXPR3:       
43ED   CD 4C 44               CALL   EXPR4   ;GET 1ST <EXPR4>
43F0                XP31:        
43F0   CD 06 40               CALL   RST08TB   ;MULTIPLY?
43F3   2A                     DB   "*"   
43F4   29                     DB   XP34-$-1   
43F5   E5                     PUSH   HL   ;YES, SAVE 1ST
43F6   CD 4C 44               CALL   EXPR4   ;AND GET 2ND <EXPR4>
43F9   06 00                  LD   B,00H   ;CLEAR B FOR SIGN
43FB   CD D9 44               CALL   CHKSGN   ;CHECK SIGN
43FE   E3                     EX   (SP),HL   ;1ST IN HL
43FF   CD D9 44               CALL   CHKSGN   ;CHECK SIGN OF 1ST
4402   EB                     EX   DE,HL   
4403   E3                     EX   (SP),HL   
4404   7C                     LD   A,H   ;IS HL > 255 ?
4405   B7                     OR   A   
4406   28 06                  JR   Z,XP32   ;NO
4408   7A                     LD   A,D   ;YES, HOW ABOUT DE
4409   B2                     OR   D   
440A   EB                     EX   DE,HL   ;PUT SMALLER IN HL
440B   C2 99 40               JP   NZ,AHOW   ;ALSO >, WILL OVERFLOW
440E                XP32:        
440E   7D                     LD   A,L   ;THIS IS DUMB
440F   21 00 00               LD   HL,0000H   ;CLEAR RESULT
4412   B7                     OR   A   ;ADD AND COUNT
4413   28 2A                  JR   Z,XP35   
4415                XP33:        
4415   19                     ADD   HL,DE   
4416   DA 99 40               JP   C,AHOW   ;OVERFLOW
4419   3D                     DEC   A   
441A   20 F9                  JR   NZ,XP33   
441C   18 21                  JR   XP35   ;FINISHED
441E                XP34:        
441E   CD 06 40               CALL   RST08TB   ;DIVIDE?
4421   2F                     DB   "/"   
4422   4C                     DB   XP42-$-1   
4423   E5                     PUSH   HL   ;YES, SAVE 1ST <EXPR4>
4424   CD 4C 44               CALL   EXPR4   ;AND GET THE SECOND ONE
4427   06 00                  LD   B,00H   ;CLEAR B FOR SIGN
4429   CD D9 44               CALL   CHKSGN   ;CHECK SIGN OF 2ND
442C   E3                     EX   (SP),HL   ;GET 1ST IN HL
442D   CD D9 44               CALL   CHKSGN   ;CHECK SIGN OF 1ST
4430   EB                     EX   DE,HL   
4431   E3                     EX   (SP),HL   
4432   EB                     EX   DE,HL   
4433   7A                     LD   A,D   ;DIVIDE BY 0?
4434   B3                     OR   E   
4435   CA 99 40               JP   Z,AHOW   ;SAY "HOW?"
4438   C5                     PUSH   BC   ;ELSE SAVE SIGN
4439   CD BD 44               CALL   DIVIDE   ;USE SUBROUTINE
443C   60                     LD   H,B   ;RESULT IN HL NOW
443D   69                     LD   L,C   
443E   C1                     POP   BC   ;GET SIGN BACK
443F                XP35:        
443F   D1                     POP   DE   ;AND TEXT POINTER
4440   7C                     LD   A,H   ;HL MUST BE +
4441   B7                     OR   A   
4442   FA 98 40               JP   M,QHOW   ;ELSE IT IS OVERFLOW
4445   78                     LD   A,B   
4446   B7                     OR   A   
4447   FC DC 44               CALL   M,CHGSGN   ;CHANGE SIGN IF NEEDED
444A   18 A4                  JR   XP31   ;LOOK FOR MORE TERMS
444C                EXPR4:       
444C   21 0D 48               LD   HL,TAB4-1   ;FIND FUNCTION IN TAB4
444F   C3 4D 48               JP   EXEC   ;AND GO DO IT
4452                XP40:        
4452   CD 33 40               CALL   RST38TB   ;NO, NOT A FUNCTION
4455   38 05                  JR   C,XP41   ;NOR A VARIABLE
4457   7E                     LD   A,(HL)   ;VARIABLE
4458   23                     INC   HL   
4459   66                     LD   H,(HL)   ;VALUE IN HL
445A   6F                     LD   L,A   
445B   C9                     RET      
445C                XP41:        
445C   CD 6F 40               CALL   TSTNUM   ;OR IS IT A NUMBER
445F   78                     LD   A,B   ;# OF DIGIT
4460   B7                     OR   A   
4461   C0                     RET   NZ   ;OK
4462                PARN:        
4462   CD 06 40               CALL   RST08TB   
4465   28                     DB   "("   
4466   09                     DB   XP43-$-1   
4467   CD 18 40               CALL   RST18TB   ;"(EXPR)"
446A   CD 06 40               CALL   RST08TB   
446D   29                     DB   ")"   
446E   01                     DB   XP43-$-1   
446F                XP42:        
446F   C9                     RET      
4470                XP43:        
4470   C3 2C 45               JP   QWHAT   ;ELSE SAY: "WHAT?"
4473                RND:         
4473   CD 62 44               CALL   PARN   ;*** RND(EXPR) ***
4476   7C                     LD   A,H   ;EXPR MUST BE +
4477   B7                     OR   A   
4478   FA 98 40               JP   M,QHOW   
447B   B5                     OR   L   ;AND NON-ZERO
447C   CA 98 40               JP   Z,QHOW   
447F   D5                     PUSH   DE   ;SAVE BOTH
4480   E5                     PUSH   HL   
4481   2A D3 17               LD   HL,(RANPNT)   ;GET MEMORY AS RANDOM
4484   11 06 49               LD   DE,LSTROM   ;NUMBER
4487   CD 1F 40               CALL   RST20TB   
448A   38 03                  JR   C,RA1   ;WRAP AROUND IF LAST
448C   21 00 40               LD   HL,tinyBasic   
448F                RA1:         
448F   5E                     LD   E,(HL)   
4490   23                     INC   HL   
4491   56                     LD   D,(HL)   
4492   22 D3 17               LD   (RANPNT),HL   
4495   E1                     POP   HL   
4496   EB                     EX   DE,HL   
4497   C5                     PUSH   BC   
4498   CD BD 44               CALL   DIVIDE   ;RND (N)=MOD(M,N)+1
449B   C1                     POP   BC   
449C   D1                     POP   DE   
449D   23                     INC   HL   
449E   C9                     RET      
449F                ABS:         
449F   CD 62 44               CALL   PARN   ;*** ABS (EXPR) ***
44A2   1B                     DEC   DE   
44A3   CD D9 44               CALL   CHKSGN   ;CHECK SIGN
44A6   13                     INC   DE   
44A7   C9                     RET      
44A8                PEEK:        
44A8   CD 62 44               CALL   PARN   ;*** PEEK (EXPR) ***
44AB   7E                     LD   A,(HL)   ;GET VALUE STORED AT EXPRESSION
44AC   6F                     LD   L,A   ;STORE VALUE BACK INTO HL
44AD   26 00                  LD   H,00H   
44AF   C9                     RET      
44B0                SIZE:        
44B0   2A D5 17               LD   HL,(TXTUNF)   ;*** SIZE ***
44B3   D5                     PUSH   DE   ;GET THE NUMBER OF FREE
44B4   EB                     EX   DE,HL   ;BYTES BETWEEN "TXTUNF"
44B5   21 00 3E               LD   HL,VARBGN   ;AND "VARBGN"
44B8   CD D2 44               CALL   SUBDE   
44BB   D1                     POP   DE   
44BC   C9                     RET      
44BD                             ;*************************************************************
44BD                             ; 
44BD                             ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
44BD                             ; 
44BD                             ; "DIVIDE" DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
44BD                             ; 
44BD                             ; "SUBDE" SUBSTRACTS DE FROM HL
44BD                             ; 
44BD                             ; "CHKSGN" CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
44BD                             ; SIGN AND FLIP SIGN OF B.
44BD                             ; 
44BD                             ; "CHGSGN" CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
44BD                             ; 
44BD                             ; "CKHLDE" CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
44BD                             ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
44BD                             ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
44BD                             ;*************************************************************
44BD                DIVIDE:      
44BD   E5                     PUSH   HL   ;*** DIVIDE ***
44BE   6C                     LD   L,H   ;DIVIDE H BY DE
44BF   26 00                  LD   H,00H   
44C1   CD C8 44               CALL   DV1   
44C4   41                     LD   B,C   ;SAVE RESULT IN B
44C5   7D                     LD   A,L   ;(REMAINDER+L)/DE
44C6   E1                     POP   HL   
44C7   67                     LD   H,A   
44C8                DV1:         
44C8   0E FF                  LD   C,0FFH   ;RESULT IN C
44CA                DV2:         
44CA   0C                     INC   C   ;DUMB ROUTINE
44CB   CD D2 44               CALL   SUBDE   ;DIVIDE BY SUBTRACT
44CE   30 FA                  JR   NC,DV2   ;AND COUNT
44D0   19                     ADD   HL,DE   
44D1   C9                     RET      
44D2                SUBDE:       
44D2   7D                     LD   A,L   ;*** SUBDE ***
44D3   93                     SUB   E   ;SUBSTRACT DE FROM
44D4   6F                     LD   L,A   ;HL
44D5   7C                     LD   A,H   
44D6   9A                     SBC   A,D   
44D7   67                     LD   H,A   
44D8   C9                     RET      
44D9                CHKSGN:      
44D9   7C                     LD   A,H   ;*** CHKSGN ***
44DA   B7                     OR   A   ;CHECK SIGN OF HL
44DB   F0                     RET   P   
44DC                CHGSGN:      
44DC   7C                     LD   A,H   ;*** CHGSGN ***
44DD   B5                     OR   L   
44DE   C8                     RET   Z   
44DF   7C                     LD   A,H   
44E0   F5                     PUSH   AF   
44E1   2F                     CPL      ;CHANGE SIGN OF HL
44E2   67                     LD   H,A   
44E3   7D                     LD   A,L   
44E4   2F                     CPL      
44E5   6F                     LD   L,A   
44E6   23                     INC   HL   
44E7   F1                     POP   AF   
44E8   AC                     XOR   H   
44E9   F2 98 40               JP   P,QHOW   
44EC   78                     LD   A,B   ;AND ALSO FLIP B
44ED   EE 80                  XOR   80H   
44EF   47                     LD   B,A   
44F0   C9                     RET      
44F1                CKHLDE:      
44F1   7C                     LD   A,H   ;SAME SIGN?
44F2   AA                     XOR   D   ;YES, COMPARE
44F3   F2 F7 44               JP   P,CK1   ;NO, XCHANGE AND COMP
44F6   EB                     EX   DE,HL   
44F7                CK1:         
44F7   C3 1F 40               JP   RST20TB   
44FA                             ;*************************************************************
44FA                             ; 
44FA                             ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
44FA                             ; 
44FA                             ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
44FA                             ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
44FA                             ; TO THAT VALUE.
44FA                             ; 
44FA                             ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
44FA                             ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
44FA                             ; NEXT LINE AND CONTINUE FROM THERE.
44FA                             ; 
44FA                             ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
44FA                             ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
44FA                             ; 
44FA                             ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
44FA                             ; IT THEN PRINTS THE LINE POINTED BY "CURRNT" WITH A "?"
44FA                             ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
44FA                             ; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
44FA                             ; AND TBI IS RESTARTED.  HOWEVER, IF "CURRNT" -> ZERO
44FA                             ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
44FA                             ; PRINTED.  AND IF "CURRNT" -> NEGATIVE # (INDICATING "INPUT"
44FA                             ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
44FA                             ; NOT TERMINATED BUT CONTINUED AT "INPERR".
44FA                             ; 
44FA                             ; RELATED TO "ERROR" ARE THE FOLLOWING:
44FA                             ; "QWHAT" SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
44FA                             ; "AWHAT" JUST GET MESSAGE "WHAT?" AND JUMP TO "ERROR".
44FA                             ; "QSORRY" AND "ASORRY" DO SAME KIND OF THING.
44FA                             ; "AHOW" AND "AHOW" IN THE ZERO PAGE SECTION ALSO DO THIS.
44FA                             ;*************************************************************
44FA                SETVAL:      
44FA   CD 33 40               CALL   RST38TB   ;*** SETVAL ***
44FD   DA 2C 45               JP   C,QWHAT   ;"WHAT?" NO VARIABLE
4500   E5                     PUSH   HL   ;SAVE ADDRESS OF VAR.
4501   CD 06 40               CALL   RST08TB   ;PASS "=" SIGN
4504   3D                     DB   "="   
4505   0A                     DB   SV1-$-1   
4506   CD 18 40               CALL   RST18TB   ;EVALUATE EXPR.
4509   44                     LD   B,H   ;VALUE IS IN BC NOW
450A   4D                     LD   C,L   
450B   E1                     POP   HL   ;GET ADDRESS
450C   71                     LD   (HL),C   ;SAVE VALUE
450D   23                     INC   HL   
450E   70                     LD   (HL),B   
450F   C9                     RET      
4510                SV1:         
4510   C3 2C 45               JP   QWHAT   ;NO "=" SIGN
4513                FIN:         
4513   CD 06 40               CALL   RST08TB   ;*** FIN ***
4516   3B                     DB   ";"   
4517   04                     DB   FI1-$-1   
4518   F1                     POP   AF   ;";", PURGE RET. ADDR.
4519   C3 56 41               JP   RUNSML   ;CONTINUE SAME LINE
451C                FI1:         
451C   CD 06 40               CALL   RST08TB   ;NOT ";", IS IT CR?
451F   0D                     DB   CR   
4520   04                     DB   FI2-$-1   
4521   F1                     POP   AF   ;YES, PURGE RET. ADDR.
4522   C3 46 41               JP   RUNNXL   ;RUN NEXT LINE
4525                FI2:         
4525   C9                     RET      ;ELSE RETURN TO CALLER
4526                ENDCHK:      
4526   CD 25 40               CALL   RST28TB   ;*** ENDCHK ***
4529   FE 0D                  CP   CR   ;END WITH CR?
452B   C8                     RET   Z   ;OK, ELSE SAY: "WHAT?"
452C                QWHAT:       
452C   D5                     PUSH   DE   ;*** QWHAT ***
452D                AWHAT:       
452D   11 A7 40               LD   DE,WHAT   ;*** AWHAT ***
4530                ERROR_ROUTINE:      
4530   97                     SUB   A   ;*** ERROR ***
4531   CD C3 45               CALL   PRTSTG   ;PRINT "WHAT?", "HOW?"
4534   D1                     POP   DE   ;OR "SORRY"
4535   1A                     LD   A,(DE)   ;SAVE THE CHARACTER
4536   F5                     PUSH   AF   ;AT WHERE OLD DE ->
4537   97                     SUB   A   ;AND PUT A 0 THERE
4538   12                     LD   (DE),A   
4539   2A C1 17               LD   HL,(CURRNT)   ;GET CURRENT LINE #
453C   E5                     PUSH   HL   
453D   7E                     LD   A,(HL)   ;CHECK THE VALUE
453E   23                     INC   HL   
453F   B6                     OR   (HL)   
4540   D1                     POP   DE   
4541   CA B3 40               JP   Z,RSTART   ;IF ZERO, JUST RESTART
4544   7E                     LD   A,(HL)   ;IF NEGATIVE,
4545   B7                     OR   A   
4546   FA FD 42               JP   M,INPERR   ;REDO INPUT
4549   CD 58 46               CALL   PRTLN   ;ELSE PRINT THE LINE
454C   1B                     DEC   DE   ;UPTO WHERE THE 0 IS
454D   F1                     POP   AF   ;RESTORE THE CHARACTER
454E   12                     LD   (DE),A   
454F   3E 3F                  LD   A,"?"   ;PRINT A "?"
4551   CD 10 40               CALL   RST10TB   
4554   97                     SUB   A   ;AND THE REST OF THE
4555   CD C3 45               CALL   PRTSTG   ;LINE
4558   C3 B3 40               JP   RSTART   ;THEN RESTART
455B                QSORRY:      
455B   D5                     PUSH   DE   ;*** QSORRY ***
455C                ASORRY:      
455C   11 AD 40               LD   DE,SORRY   ;*** ASORRY ***
455F   18 CF                  JR   ERROR_ROUTINE   
4561                             ;*************************************************************
4561                             ; 
4561                             ; *** GETLN *** FNDLN (& FRIENDS) ***
4561                             ; 
4561                             ; "GETLN" READS A INPUT LINE INTO "BUFFER".  IT FIRST PROMPT
4561                             ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
4561                             ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
4561                             ; ECHOS THEM BACK.  BACKSPACE IS USED TO CAUSE IT TO DELETE
4561                             ; THE LAST CHARACTER (IF THERE IS ONE), AND CTRL-Z IS USED TO
4561                             ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
4561                             ; CR SIGNALS THE END OF A LINE, AND CAUSE "GETLN" TO RETURN.
4561                             ; 
4561                             ; "FNDLN" FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
4561                             ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
4561                             ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
4561                             ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
4561                             ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
4561                             ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
4561                             ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
4561                             ; LINE, FLAGS ARE C & NZ.
4561                             ; "FNDLN" WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
4561                             ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
4561                             ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
4561                             ; "FNDLNP" WILL START WITH DE AND SEARCH FOR THE LINE #.
4561                             ; "FNDNXT" WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
4561                             ; "FNDSKP" USE DE TO FIND A CR, AND THEN START SEARCH.
4561                             ;*************************************************************
4561                GETLN:       
4561   CD 10 40               CALL   RST10TB   ;*** GETLN ***
4564   11 37 3E               LD   DE,BUFFER   ;PROMPT AND INIT.
4567                GL1:         
4567   CD 53 47               CALL   CHKIO   ;CHECK KEYBOARD
456A   28 FB                  JR   Z,GL1   ;NO INPUT, WAIT
456C   FE 08                  CP   BKSP   ;DELETE LAST CHARACTER?
456E   28 18                  JR   Z,GL3   ;YES
4570   CD 10 40               CALL   RST10TB   ;INPUT, ECHO BACK
4573   FE 0A                  CP   LF   ;IGNORE LF
4575   28 F0                  JR   Z,GL1   
4577   B7                     OR   A   ;IGNORE NULL
4578   28 ED                  JR   Z,GL1   
457A   FE 1A                  CP   CTRLZ   ;DELETE THE WHOLE LINE?
457C   28 17                  JR   Z,GL4   ;YES
457E   12                     LD   (DE),A   ;ELSE SAVE INPUT
457F   13                     INC   DE   ;AND BUMP POINTER
4580   FE 0D                  CP   CR   ;WAS IT CR
4582   C8                     RET   Z   ;YES, END OF LINE
4583   7B                     LD   A,E   ;ELSE MORE FREE ROOM?
4584   FE 87                  CP   BUFEND & 0FFH   
4586   20 DF                  JR   NZ,GL1   ;YES, GET NEXT INPUT
4588                GL3:         
4588   7B                     LD   A,E   ;DELETE LAST CHARACTER
4589   FE 37                  CP   BUFFER & 0FFH   ;BUT DO WE HAVE ANY?
458B   28 08                  JR   Z,GL4   ;NO, REDO WHOLE LINE
458D   1B                     DEC   DE   ;YES, BACKUP POINTER
458E   3E 08                  LD   A,BKSP   ;AND ECHO A BACK SPACE
4590   CD 10 40               CALL   RST10TB   
4593   18 D2                  JR   GL1   ;GO GET NEXT INPUT
4595                GL4:         
4595   CD 0E 40               CALL   CRLF   ;REDO ENTIRE LINE
4598                             ; LD A,VT                         ;CR, LF AND UP-ARROW
4598                             ; CALL RST10TB
4598   3E 3E                  LD   A,">"   
459A   18 C5                  JR   GETLN   
459C                FNDLN:       
459C   7C                     LD   A,H   ;*** FNDLN ***
459D   B7                     OR   A   ;CHECK SIGN OF HL
459E   FA 98 40               JP   M,QHOW   ;IT CANNOT BE -
45A1   11 D7 17               LD   DE,TXTBGN   ;INIT TEXT POINTER
45A4                FNDLP:       ;*** FDLNP ***
45A4                FL1:         
45A4   E5                     PUSH   HL   ;SAVE LINE #
45A5   2A D5 17               LD   HL,(TXTUNF)   ;CHECK IF WE PASSED END
45A8   2B                     DEC   HL   
45A9   CD 1F 40               CALL   RST20TB   
45AC   E1                     POP   HL   ;GET LINE # BACK
45AD   D8                     RET   C   ;C,NZ PASSED END
45AE   1A                     LD   A,(DE)   ;WE DID NOT, GET BYTE 1
45AF   95                     SUB   L   ;IS THIS THE LINE?
45B0   47                     LD   B,A   ;COMPARE LOW ORDER
45B1   13                     INC   DE   
45B2   1A                     LD   A,(DE)   ;GET BYTE 2
45B3   9C                     SBC   A,H   ;COMPARE HIGH ORDER
45B4   38 04                  JR   C,FL2   ;NO, NOT THERE YET
45B6   1B                     DEC   DE   ;ELSE WE EITHER FOUND
45B7   B0                     OR   B   ;IT, OR IT IS NOT THERE
45B8   C9                     RET      ;NC,Z;FOUND, NC,NZ:NO
45B9                FNDNXT:      ;*** FNDNXT ***
45B9   13                     INC   DE   ;FIND NEXT LINE
45BA                FL2:         
45BA   13                     INC   DE   ;JUST PASSED BYTE 1 & 2
45BB                FNDSKP:      
45BB   1A                     LD   A,(DE)   ;*** FNDSKP ***
45BC   FE 0D                  CP   CR   ;TRY TO FIND CR
45BE   20 FA                  JR   NZ,FL2   ;KEEP LOOKING
45C0   13                     INC   DE   ;FOUND CR, SKIP OVER
45C1   18 E1                  JR   FL1   ;CHECK IF END OF TEXT
45C3                             ;*************************************************************
45C3                             ; 
45C3                             ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
45C3                             ; 
45C3                             ; "PRTSTG" PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
45C3                             ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
45C3                             ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
45C3                             ; CALLER).  OLD A IS STORED IN C, OLD C IS LOST.
45C3                             ; 
45C3                             ; "QTSTG" LOOKS FOR A UNDERSCORE, SINGLE QUOTE, OR DOUBLE
45C3                             ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF UNDERSCORE,
45C3                             ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
45C3                             ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
45C3                             ; AFTER THE PRINTING THE NEXT 2 BYTES OF THE CALLER IS SKIPPED
45C3                             ; OVER (USUALLY A JUMP INSTRUCTION.
45C3                             ; 
45C3                             ; "PRTNUM" PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
45C3                             ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
45C3                             ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
45C3                             ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
45C3                             ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
45C3                             ; 
45C3                             ; "PRTLN" PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
45C3                             ; 
45C3                             ; "PRTCHR" PRINTS THE VALUE IN L AS AN ASCII CHARACTER.  THIS
45C3                             ; WILL PRINT NON ASCII CHARACTERS TOO.  IE: ^G (BEL)
45C3                             ; 
45C3                             ; "PRTASC" PRINTS THE VALUE IN L AS AN ASCII
45C3                             ; 
45C3                             ; "PRTHEX" PRINTS THE VALUE IN HL AS A HEXIDECIMAL NUMBER.
45C3                             ; HL IS TWO BYTES, SO TWO HEX VALUES WILL BE DISPLAYED.
45C3                             ; IF H IS ZERO THEN ONLY ONE BYTE WILL BE DISPLAYED.
45C3                             ; 
45C3                             ;*************************************************************
45C3                PRTSTG:      
45C3   47                     LD   B,A   ;*** PRTSTG ***
45C4   CD A6 CF               CALL   getGLCDTerm   
45C7   B7                     OR   A   ;CHECK VALUE
45C8   28 13                  JR   Z,PS1   
45CA   C5                     PUSH   BC   
45CB   48                     LD   C,B   ;*** PRTSTG ***
45CC   D5                     PUSH   DE   
45CD   E5                     PUSH   HL   
45CE   CD AD DB               CALL   sendStringToLCD   ;SEND TO GLCD TERMINAL
45D1   E1                     POP   HL   
45D2   D1                     POP   DE   
45D3   C1                     POP   BC   
45D4                PS0:         
45D4   1A                     LD   A,(DE)   ;ADJUST DE (UGGHH)
45D5   13                     INC   DE   
45D6   B8                     CP   B   
45D7   C8                     RET   Z   
45D8   FE 0D                  CP   CR   
45DA   20 F8                  JR   NZ,PS0   
45DC   C9                     RET      
45DD                PS1:         
45DD   1A                     LD   A,(DE)   ;GET A CHARACTER
45DE   13                     INC   DE   ;BUMP POINTER
45DF   B8                     CP   B   ;SAME AS OLD A?
45E0   C8                     RET   Z   ;YES, RETURN
45E1   CD 10 40               CALL   RST10TB   ;NO, NEXT
45E4   FE 0D                  CP   CR   ;WAS IT A CR?
45E6   20 F5                  JR   NZ,PS1   ;NO, NEXT
45E8   C9                     RET      ;YES, RETURN
45E9                QTSTG:       
45E9   CD 06 40               CALL   RST08TB   ;*** QTSTG ***
45EC   22                     DB   22H   
45ED   0E                     DB   QT3-$-1   
45EE   3E 22                  LD   A,22H   ;IT IS A "
45F0                QT1:         
45F0   CD C3 45               CALL   PRTSTG   ;PRINT UNTIL ANOTHER
45F3   FE 0D                  CP   CR   ;WAS LAST ONE A CR?
45F5   E1                     POP   HL   ;RETURN ADDRESS
45F6   CA 46 41               JP   Z,RUNNXL   ;WAS CR, RUN NEXT LINE
45F9                QT2:         
45F9   23                     INC   HL   ;SKIP 2 BYTES ON RETURN
45FA   23                     INC   HL   
45FB   E9                     JP   (HL)   ;RETURN
45FC                QT3:         
45FC   CD 06 40               CALL   RST08TB   ;IS IT A '?
45FF   27                     DB   27H   
4600   04                     DB   QT4-$-1   
4601   3E 27                  LD   A,27H   ;YES, DO THE SAME
4603   18 EB                  JR   QT1   ;AS IN "
4605                QT4:         
4605   CD 06 40               CALL   RST08TB   ;IS IT UNDERSCORE?
4608   5F                     DB   "_"   
4609   0D                     DB   QT5-$-1   
460A   3E 0D                  LD   A,CR   ;YES, CR WITHOUT LF
460C   CD 10 40               CALL   RST10TB   ;DO IT TWICE TO GIVE
460F   3E 0B                  LD   A,VT   ;YES, CR WITHOUT LF
4611   CD 10 40               CALL   RST10TB   ;TTY ENOUGH TIME
4614   E1                     POP   HL   ;RETURN ADDRESS
4615   18 E2                  JR   QT2   
4617                QT5:         
4617   C9                     RET      ;NONE OF ABOVE
4618                             ; 
4618                PRTNUM:      
4618   06 00                  LD   B,00H   ;*** PRTNUM ***
461A   CD D9 44               CALL   CHKSGN   ;CHECK SIGN
461D   F2 23 46               JP   P,PN1   ;NO SIGN
4620   06 2D                  LD   B,"-"   ;B=SIGN
4622   0D                     DEC   C   ;"-" TAKES SPACE
4623                PN1:         
4623   D5                     PUSH   DE   ;SAVE
4624   11 0A 00               LD   DE,000AH   ;DECIMAL
4627   D5                     PUSH   DE   ;SAVE AS FLAG
4628   0D                     DEC   C   ;C=SPACES
4629   C5                     PUSH   BC   ;SAVE SIGN & SPACE
462A                PN2:         
462A   CD BD 44               CALL   DIVIDE   ;DIVIDE HL BY 10
462D   78                     LD   A,B   ;RESULT 0?
462E   B1                     OR   C   
462F   28 07                  JR   Z,PN3   ;YES, WE GOT ALL
4631   E3                     EX   (SP),HL   ;NO, SAVE REMAINDER
4632   2D                     DEC   L   ;AND COUNT SPACE
4633   E5                     PUSH   HL   ;HL IS OLD BC
4634   60                     LD   H,B   ;MOVE RESULT TO BC
4635   69                     LD   L,C   
4636   18 F2                  JR   PN2   ;AND DIVIDE BY 10
4638                PN3:         
4638   C1                     POP   BC   ;WE GOT ALL DIGITS IN
4639                PN4:         
4639   0D                     DEC   C   ;THE STACK
463A   79                     LD   A,C   ;LOOK AT SPACE COUNT
463B   B7                     OR   A   
463C   FA 46 46               JP   M,PN5   ;NO LEADING BLANKS
463F   3E 20                  LD   A,20H   ;LEADING BLANKS
4641   CD 10 40               CALL   RST10TB   
4644   18 F3                  JR   PN4   ;MORE?
4646                PN5:         
4646   78                     LD   A,B   ;PRINT SIGN
4647   B7                     OR   A   
4648   C4 10 40               CALL   NZ,RST10TB   
464B   5D                     LD   E,L   ;LAST REMAINDER IN E
464C                PN6:         
464C   7B                     LD   A,E   ;CHECK DIGIT IN E
464D   FE 0A                  CP   0AH   ;10 IS FLAG FOR NO MORE
464F   D1                     POP   DE   
4650   C8                     RET   Z   ;IF SO, RETURN
4651   C6 30                  ADD   A,30H   ;ELSE, CONVERT TO ASCII
4653   CD 10 40               CALL   RST10TB   ;PRINT THE DIGIT
4656   18 F4                  JR   PN6   ;GO BACK FOR MORE
4658                PRTLN:       
4658   1A                     LD   A,(DE)   ;*** PRTLN ***
4659   6F                     LD   L,A   ;LOW ORDER LINE #
465A   13                     INC   DE   
465B   1A                     LD   A,(DE)   ;HIGH ORDER
465C   67                     LD   H,A   
465D   13                     INC   DE   
465E   0E 04                  LD   C,04H   ;PRINT 4 DIGIT LINE #
4660   CD 18 46               CALL   PRTNUM   
4663   3E 20                  LD   A,20H   ;FOLLOWED BY A BLANK
4665   CD 10 40               CALL   RST10TB   
4668   97                     SUB   A   ;AND THEN THE NEXT
4669   C3 C3 45               JP   PRTSTG   
466C                PRTCHR:      
466C   7D                     LD   A,L   ;GET THE NUMBER
466D                             ;AND DEL                         ;ONLY LOOK AT 0-128
466D                PC1:         
466D   C3 10 40               JP   RST10TB   ;PRINT VALUE IN A
4670                PRTASC:      
4670   7D                     LD   A,L   ;GET THE NUMBER
4671   FE 20                  CP   SPACE   ;IS IT LOWER THAN " " ?
4673   38 04                  JR   C,PA1   ;YES
4675   FE 7F                  CP   DEL   ;IS IT HIGHER THAN "~" ?
4677   38 F4                  JR   C,PC1   ;NO
4679                PA1:         
4679   3E 2E                  LD   A,"."   ;DISPLAY A . IF NON PRINTABLE
467B   18 F0                  JR   PC1   
467D                PRTHEX:      
467D   7C                     LD   A,H   
467E   B7                     OR   A   
467F   28 03                  JR   Z,PH1   
4681   CD 85 46               CALL   A2HEX   
4684                PH1:         
4684   7D                     LD   A,L   
4685                A2HEX:       
4685   F5                     PUSH   AF   ;SAVE A FOR SECOND NIBBLE
4686   0F                     RRCA      ;SHIFT HIGH NIBBLE ACROSS
4687   0F                     RRCA      ; 
4688   0F                     RRCA      ; 
4689   0F                     RRCA      ; 
468A   CD 8E 46               CALL   PH2   ;CALL NIBBLE CONVERTER
468D   F1                     POP   AF   ;RECOVER LOW NIBBLE
468E                PH2:         
468E   E6 0F                  AND   0FH   ;MASK OFF HIGH NIBBLE
4690   C6 90                  ADD   A,90H   ;CONVERT TO
4692   27                     DAA      ;ASCII
4693   CE 40                  ADC   A,40H   ;USING THIS
4695   27                     DAA      ;AMAZING ROUTINE
4696   C3 10 40               JP   RST10TB   ;DONE
4699                             ;*************************************************************
4699                             ; 
4699                             ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
4699                             ; 
4699                             ; "MVUP" MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
4699                             ; DE = HL
4699                             ; 
4699                             ; "MVDOWN" MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
4699                             ; UNTIL DE = BC
4699                             ; 
4699                             ; "POPA" RESTORES THE "FOR" LOOP VARIABLE SAVE AREA FROM THE
4699                             ; STACK
4699                             ; 
4699                             ; "PUSHA" STACKS THE "FOR" LOOP VARIABLE SAVE AREA INTO THE
4699                             ; STACK
4699                             ;*************************************************************
4699                MVUP1:       
4699   CD 1F 40               CALL   RST20TB   ;*** MVUP ***
469C   C8                     RET   Z   ;DE = HL, RETURN
469D   1A                     LD   A,(DE)   ;GET ONE BYTE
469E   02                     LD   (BC),A   ;MOVE IT
469F   13                     INC   DE   ;INCREASE BOTH POINTERS
46A0   03                     INC   BC   
46A1   18 F6                  JR   MVUP1   ;UNTIL DONE
46A3                MVDOWN:      
46A3   78                     LD   A,B   ;*** MVDOWN ***
46A4   92                     SUB   D   ;TEST IF DE = BC
46A5   C2 AB 46               JP   NZ,MD1   ;NO, GO MOVE
46A8   79                     LD   A,C   ;MAYBE, OTHER BYTE?
46A9   93                     SUB   E   
46AA   C8                     RET   Z   ;YES, RETURN
46AB                MD1:         
46AB   1B                     DEC   DE   ;ELSE MOVE A BYTE
46AC   2B                     DEC   HL   ;BUT FIRST DECREASE
46AD   1A                     LD   A,(DE)   ;BOTH POINTERS AND
46AE   77                     LD   (HL),A   ;THEN DO IT
46AF   18 F2                  JR   MVDOWN   ;LOOP BACK
46B1                POPA:        
46B1   C1                     POP   BC   ;BC = RETURN ADDR.
46B2   E1                     POP   HL   ;RESTORE LOPVAR, BUT
46B3   22 C9 17               LD   (LOPVAR),HL   ;=0 MEANS NO MORE
46B6   7C                     LD   A,H   
46B7   B5                     OR   L   
46B8   28 10                  JR   Z,PP1   ;YEP, GO RETURN
46BA   E1                     POP   HL   ;NOP, RESTORE OTHERS
46BB   22 CB 17               LD   (LOPINC),HL   
46BE   E1                     POP   HL   
46BF   22 CD 17               LD   (LOPLMT),HL   
46C2   E1                     POP   HL   
46C3   22 CF 17               LD   (LOPLN),HL   
46C6   E1                     POP   HL   
46C7   22 D1 17               LD   (LOPPT),HL   
46CA                PP1:         
46CA   C5                     PUSH   BC   ;BC = RETURN ADDR.
46CB   C9                     RET      
46CC                PUSHA:       
46CC   21 88 3E               LD   HL,STKLMT   ;*** PUSHA ***
46CF   CD DC 44               CALL   CHGSGN   
46D2   C1                     POP   BC   ;BC=RETURN ADDRESS
46D3   39                     ADD   HL,SP   ;IS STACK NEAR THE TOP?
46D4   D2 5B 45               JP   NC,QSORRY   ;YES, SORRY FOR THAT
46D7   2A C9 17               LD   HL,(LOPVAR)   ;ELSE SAVE LOOP VAR'S
46DA   7C                     LD   A,H   ;BUT IF LOPVAR IS 0
46DB   B5                     OR   L   ;THAT WILL BE ALL
46DC   28 13                  JR   Z,PU1   
46DE   2A D1 17               LD   HL,(LOPPT)   ;ELSE, MORE TO SAVE
46E1   E5                     PUSH   HL   
46E2   2A CF 17               LD   HL,(LOPLN)   
46E5   E5                     PUSH   HL   
46E6   2A CD 17               LD   HL,(LOPLMT)   
46E9   E5                     PUSH   HL   
46EA   2A CB 17               LD   HL,(LOPINC)   
46ED   E5                     PUSH   HL   
46EE   2A C9 17               LD   HL,(LOPVAR)   
46F1                PU1:         
46F1   E5                     PUSH   HL   
46F2   C5                     PUSH   BC   ;BC = RETURN ADDR.
46F3   C9                     RET      
46F4                             ;*************************************************************
46F4                             ; 
46F4                             ; *** OUTC *** OUTP *** XON *** XOFF *** CHKIO ***
46F4                             ; 
46F4                             ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
46F4                             ; "OUTC" IS CONTROLLED BY A SOFTWARE SWITCH "OCSW".  IF OCSW=0
46F4                             ; "OUTC" WILL JUST RETURN TO THE CALLER.  IF OCSW IS NOT 0,
46F4                             ; IT WILL OUTPUT THE BYTE IN A.  IF THAT IS A CR, A LF IS ALSO
46F4                             ; SEND OUT.  ONLY THE FLAGS MAY BE CHANGED AT RETURN. ALL REG.
46F4                             ; ARE RESTORED.
46F4                             ; 
46F4                             ; "OUTP" LETS THE USER SEND DATA TO AN OUTPUT PORT ON THE
46F4                             ; CONTROLING HARDWARE.  THE FORMAT IS "OUT <PORT>,<DATA>"
46F4                             ; WHERE <PORT> IS THE PORT NUMBER AND <DATA> IS THE DATA
46F4                             ; TO OUTPUT.  BOTH PORT NUMBER AND DATA ARE EXPRESIONS AND
46F4                             ; ARE TO BE LESS THAN 256.
46F4                             ; 
46F4                             ; "XON" AND "XOFF" PROGRAMATICALLY TURN ON OR OFF THE
46F4                             ; OUTPUT SWITCH.  THIS IS THE SAME AS PRESSING CONTROL-O
46F4                             ; ON THE KEYBOARD.  THE CAN BE USED TO DISABLE TX_RDY,
46F4                             ; THE SERIAL OUTPUT ROUTINE, IF THE SAME PORT IS BEING
46F4                             ; USED.
46F4                             ; 
46F4                             ; "CHKIO" CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
46F4                             ; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
46F4                             ; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
46F4                             ; INPUT IS A CONTROL-O, THE "OCSW" SWITCH IS COMPLIMENTED, AND
46F4                             ; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, "CHKIO" WILL
46F4                             ; RESTART TBI AND DO NOT RETURN TO THE CALLER.
46F4                             ; 
46F4                             ; Do not modify these routines.  Routines requiring
46F4                             ; modification are : SERIAL_INIT, RX_RDY, and TX_RDY.
46F4                             ;*************************************************************
46F4                INIT:        
46F4   CD 79 48               CALL   SERIAL_INIT   ;INITIALIZE THE SIO
46F7   AF                     XOR   A   
46F8   11 82 47               LD   DE,MSG1   ;PRINT THE BOOT MESSAGES
46FB   CD C3 45               CALL   PRTSTG   
46FE   AF                     XOR   A   
46FF   11 95 47               LD   DE,MSG2   
4702   CD C3 45               CALL   PRTSTG   
4705   21 00 40               LD   HL,tinyBasic   
4708   22 D3 17               LD   (RANPNT),HL   
470B   21 D7 17               LD   HL,TXTBGN   
470E   22 D5 17               LD   (TXTUNF),HL   
4711   C3 B3 40               JP   RSTART   
4714                OUTC:        
4714   20 02                  JR   NZ,OUTC2   ;IT IS ON
4716   F1                     POP   AF   ;IT IS OFF
4717   C9                     RET      ;RESTORE AF AND RETURN
4718                OUTC2:       
4718   F1                     POP   AF   ;RESTORE THE REGISTER
4719   CD 84 48               CALL   TX_RDY   ;SEND THE BYTE
471C   FE 0D                  CP   CR   
471E   C0                     RET   NZ   
471F   3E 0A                  LD   A,LF   
4721   CD 10 40               CALL   RST10TB   
4724   3E 0D                  LD   A,CR   
4726   C9                     RET      
4727                OUTP:        
4727   CD 18 40               CALL   RST18TB   ;GET PORT NUMBER
472A   AF                     XOR   A   ;IS PORT > 255?
472B   BC                     CP   H   
472C   C2 98 40               JP   NZ,QHOW   ;YES, NOT A VALID PORT
472F   CD 06 40               CALL   RST08TB   ;IF "," THEN GET DATA
4732   2C                     DB   ","   
4733   11                     DB   OT1-$-1   
4734   E5                     PUSH   HL   
4735   CD 18 40               CALL   RST18TB   ;GET DATA TO OUTPUT
4738   AF                     XOR   A   ;IS DATA > 255?
4739   BC                     CP   H   
473A   C2 98 40               JP   NZ,QHOW   ;YES, NOT A DATA VALUE
473D   7D                     LD   A,L   ;RETRIVE DATA
473E   E1                     POP   HL   
473F   4D                     LD   C,L   ;RETRIVE PORT
4740   ED 79                  OUT   (C),A   ;SEND IT OUT
4742   CD 2C 40               CALL   RST30TB   
4745                OT1:         
4745   C3 2C 45               JP   QWHAT   
4748                XON:         
4748   3E FF                  LD   A,0FFH   ;SET SWTICH TO ON
474A   18 01                  JR   XO1   
474C                XOFF:        
474C   AF                     XOR   A   ;SET SWITCH TO OFF
474D                XO1:         
474D   32 C0 17               LD   (OCSW),A   ;SAVE NEW SWITCH
4750   CD 2C 40               CALL   RST30TB   ;CONTINUE
4753                CHKIO:       
4753   CD C0 48               CALL   RX_RDY   ;CHECK IF CHARACTER AVAILABLE
4756   C8                     RET   Z   ;RETURN IF NO CHARACTER AVAILABLE
4757   C5                     PUSH   BC   ;IF IT'S A LF, IGNORE AND RETURN
4758   47                     LD   B,A   ; AS IF THERE WAS NO CHARACTER.
4759   D6 0A                  SUB   LF   
475B   28 0F                  JR   Z,CHKIO2   
475D   78                     LD   A,B   ;OTHERWISE RESTORE "A" AND "BC"
475E   C1                     POP   BC   ; AND CONTINUE ON.
475F   FE 0F                  CP   CTRLO   ;IS IT CONTROL-0?
4761   20 0C                  JR   NZ,CI1   ;NO, MORE CHECKING
4763   3A C0 17               LD   A,(OCSW)   ;CONTROL-0 FLIPS OCSW
4766   2F                     CPL      ;ON TO OFF, OFF TO ON
4767   32 C0 17               LD   (OCSW),A   
476A   18 E7                  JR   CHKIO   ;GET ANOTHER INPUT
476C                CHKIO2:      
476C   AF                     XOR   A   ;CLEAR A
476D   C1                     POP   BC   ;RESTORE THE "BC" PAIR
476E   C9                     RET      ;RETURN WITH "Z" SET.
476F                CI1:         
476F   FE 61                  CP   61H   ;IS IT LOWER THAN "a" ?
4771   38 06                  JR   C,CI2   ;YES
4773   FE 7B                  CP   7BH   ;IS IT HIGHT THAN "z" ?
4775   30 02                  JR   NC,CI2   ;YES
4777   E6 DF                  AND   0DFH   ;MAKE IT UPPER CASE
4779                CI2:         
4779   FE 03                  CP   CTRLC   ;IS IT CONTROL-C?
477B   CA B3 40               JP   Z,RSTART   ;YES, RESTART TBI
477E   FE 04                  CP   CTRLD   ;IS IT CONTROL-D?
4780   C0                     RET   NZ   ;NO, RETURN "NZ"
4781   C7                     RST   00H   ;RESTART MONITOR AND EXIT
4782   54 45 43 2D 31 47 20 54 49 4E 59 20 42 41 53 49 43 20 0D MSG1:   DB   "TEC-1G TINY BASIC ",CR   ;CLEAR SCREEN AND BOOT MESSAGE
4795   43 52 41 43 4B 45 44 20 42 59 20 42 20 43 48 49 48 41 20 17 0D MSG2:   DB   "CRACKED BY B CHIHA ",23,CR   
47AA                             ;*************************************************************
47AA                             ; 
47AA                             ; *** TABLES *** DIRECT *** & EXEC ***
47AA                             ; 
47AA                             ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
47AA                             ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
47AA                             ; OF CODE ACCORDING TO THE TABLE.
47AA                             ; 
47AA                             ; AT "EXEC", DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
47AA                             ; TO THE TABLE-1.  AT "DIRECT", DE SHOULD POINT TO THE STRING.
47AA                             ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
47AA                             ; ALL DIRECT AND STATEMENT COMMANDS.
47AA                             ; 
47AA                             ; A "." IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
47AA                             ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., "P.", "PR.",
47AA                             ; "PRI.", "PRIN.", OR "PRINT" WILL ALL MATCH "PRINT".
47AA                             ; 
47AA                             ; THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
47AA                             ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
47AA                             ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
47AA                             ; BYTE SET TO 1.
47AA                             ; 
47AA                             ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE
47AA                             ; STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL
47AA                             ; MATCH THIS NULL ITEM AS DEFAULT.
47AA                             ;*************************************************************
47AA                TAB1:        ;DIRECT COMMANDS
47AA   4C 49 53 54            DB   "LIST"   
47AE                          ;*Macro unroll:  DWA LIST
47AE   C1                     DB   msb(LIST) + 128   
47AF   6F                     DB   lsb(LIST)   
47B0   52 55 4E               DB   "RUN"   
47B3                          ;*Macro unroll:  DWA RUN
47B3   C1                     DB   msb(RUN) + 128   
47B4   40                     DB   lsb(RUN)   
47B5   4E 45 57               DB   "NEW"   
47B8                          ;*Macro unroll:  DWA NEW
47B8   C1                     DB   msb(NEW) + 128   
47B9   31                     DB   lsb(NEW)   
47BA                TAB2:        ;DIRECT/STATEMENT
47BA   4E 45 58 54            DB   "NEXT"   
47BE                          ;*Macro unroll:  DWA NEXT
47BE   C2                     DB   msb(NEXT) + 128   
47BF   89                     DB   lsb(NEXT)   
47C0   4C 45 54               DB   "LET"   
47C3                          ;*Macro unroll:  DWA LET
47C3   C3                     DB   msb(LET) + 128   
47C4   62                     DB   lsb(LET)   
47C5   49 46                  DB   "IF"   
47C7                          ;*Macro unroll:  DWA IFF
47C7   C2                     DB   msb(IFF) + 128   
47C8   EC                     DB   lsb(IFF)   
47C9   47 4F 54 4F            DB   "GOTO"   
47CD                          ;*Macro unroll:  DWA GOTO
47CD   C1                     DB   msb(GOTO) + 128   
47CE   5F                     DB   lsb(GOTO)   
47CF   47 4F 53 55 42         DB   "GOSUB"   
47D4                          ;*Macro unroll:  DWA GOSUB
47D4   C1                     DB   msb(GOSUB) + 128   
47D5   ED                     DB   lsb(GOSUB)   
47D6   52 45 54 55 52 4E      DB   "RETURN"   
47DC                          ;*Macro unroll:  DWA RETURN
47DC   C2                     DB   msb(RETURN) + 128   
47DD   0F                     DB   lsb(RETURN)   
47DE   52 45 4D               DB   "REM"   
47E1                          ;*Macro unroll:  DWA REM
47E1   C2                     DB   msb(REM) + 128   
47E2   E7                     DB   lsb(REM)   
47E3   46 4F 52               DB   "FOR"   
47E6                          ;*Macro unroll:  DWA FOR
47E6   C2                     DB   msb(FOR) + 128   
47E7   2A                     DB   lsb(FOR)   
47E8   49 4E 50 55 54         DB   "INPUT"   
47ED                          ;*Macro unroll:  DWA INPUT
47ED   C3                     DB   msb(INPUT) + 128   
47EE   07                     DB   lsb(INPUT)   
47EF   50 52 49 4E 54         DB   "PRINT"   
47F4                          ;*Macro unroll:  DWA PRINT
47F4   C1                     DB   msb(PRINT) + 128   
47F5   86                     DB   lsb(PRINT)   
47F6   4F 55 54               DB   "OUT"   
47F9                          ;*Macro unroll:  DWA OUTP
47F9   C7                     DB   msb(OUTP) + 128   
47FA   27                     DB   lsb(OUTP)   
47FB   53 54 4F 50            DB   "STOP"   
47FF                          ;*Macro unroll:  DWA STOP
47FF   C1                     DB   msb(STOP) + 128   
4800   3A                     DB   lsb(STOP)   
4801   58 4F 4E               DB   "XON"   
4804                          ;*Macro unroll:  DWA XON
4804   C7                     DB   msb(XON) + 128   
4805   48                     DB   lsb(XON)   
4806   58 4F 46 46            DB   "XOFF"   
480A                          ;*Macro unroll:  DWA XOFF
480A   C7                     DB   msb(XOFF) + 128   
480B   4C                     DB   lsb(XOFF)   
480C                          ;*Macro unroll:  DWA DEFLT
480C   C3                     DB   msb(DEFLT) + 128   
480D   5D                     DB   lsb(DEFLT)   
480E                TAB4:        ;FUNCTIONS
480E   52 4E 44               DB   "RND"   
4811                          ;*Macro unroll:  DWA RND
4811   C4                     DB   msb(RND) + 128   
4812   73                     DB   lsb(RND)   
4813   41 42 53               DB   "ABS"   
4816                          ;*Macro unroll:  DWA ABS
4816   C4                     DB   msb(ABS) + 128   
4817   9F                     DB   lsb(ABS)   
4818   50 45 45 4B            DB   "PEEK"   
481C                          ;*Macro unroll:  DWA PEEK
481C   C4                     DB   msb(PEEK) + 128   
481D   A8                     DB   lsb(PEEK)   
481E   53 49 5A 45            DB   "SIZE"   
4822                          ;*Macro unroll:  DWA SIZE
4822   C4                     DB   msb(SIZE) + 128   
4823   B0                     DB   lsb(SIZE)   
4824                          ;*Macro unroll:  DWA XP40
4824   C4                     DB   msb(XP40) + 128   
4825   52                     DB   lsb(XP40)   
4826                TAB5:        ;"TO" IN "FOR"
4826   54 4F                  DB   "TO"   
4828                          ;*Macro unroll:  DWA FR1
4828   C2                     DB   msb(FR1) + 128   
4829   3A                     DB   lsb(FR1)   
482A                          ;*Macro unroll:  DWA QWHAT
482A   C5                     DB   msb(QWHAT) + 128   
482B   2C                     DB   lsb(QWHAT)   
482C                TAB6:        ;"STEP" IN "FOR"
482C   53 54 45 50            DB   "STEP"   
4830                          ;*Macro unroll:  DWA FR2
4830   C2                     DB   msb(FR2) + 128   
4831   46                     DB   lsb(FR2)   
4832                          ;*Macro unroll:  DWA FR3
4832   C2                     DB   msb(FR3) + 128   
4833   4B                     DB   lsb(FR3)   
4834                TAB8:        ;RELATION OPERATORS
4834   3E 3D                  DB   ">="   
4836                          ;*Macro unroll:  DWA XP11
4836   C3                     DB   msb(XP11) + 128   
4837   75                     DB   lsb(XP11)   
4838   23                     DB   "#"   
4839                          ;*Macro unroll:  DWA XP12
4839   C3                     DB   msb(XP12) + 128   
483A   7B                     DB   lsb(XP12)   
483B   3E                     DB   ">"   
483C                          ;*Macro unroll:  DWA XP13
483C   C3                     DB   msb(XP13) + 128   
483D   81                     DB   lsb(XP13)   
483E   3D                     DB   "="   
483F                          ;*Macro unroll:  DWA XP15
483F   C3                     DB   msb(XP15) + 128   
4840   90                     DB   lsb(XP15)   
4841   3C 3D                  DB   "<="   
4843                          ;*Macro unroll:  DWA XP14
4843   C3                     DB   msb(XP14) + 128   
4844   88                     DB   lsb(XP14)   
4845   3C                     DB   "<"   
4846                          ;*Macro unroll:  DWA XP16
4846   C3                     DB   msb(XP16) + 128   
4847   96                     DB   lsb(XP16)   
4848                          ;*Macro unroll:  DWA XP17
4848   C3                     DB   msb(XP17) + 128   
4849   9C                     DB   lsb(XP17)   
484A   21 A9 47     DIRECT:   LD   HL,TAB1-1   ;*** DIRECT ***
484D                EXEC:        ;*** EXEC ***
484D   CD 25 40     EX0:      CALL   RST28TB   ;IGNORE LEADING BLANKS
4850   D5                     PUSH   DE   ;SAVE POINTER
4851                EX1:         
4851   1A                     LD   A,(DE)   ;IF FOUND "." IN STRING
4852   13                     INC   DE   ;BEFORE ANY MISMATCH
4853   FE 2E                  CP   "."   ;WE DECLARE A MATCH
4855   28 12                  JR   Z,EX3   
4857   23                     INC   HL   ;HL->TABLE
4858   BE                     CP   (HL)   ;IF MATCH, TEST NEXT
4859   28 F6                  JR   Z,EX1   
485B   3E 7F                  LD   A,7FH   ;ELSE SEE IF BIT 7
485D   1B                     DEC   DE   ;OF TABLE IS SET, WHICH
485E   BE                     CP   (HL)   ;IS THE JUMP ADDR. (HI)
485F   38 0E                  JR   C,EX5   ;C:YES, MATCHED
4861                EX2:         
4861   23                     INC   HL   ;NC:NO, FIND JUMP ADDR.
4862   BE                     CP   (HL)   
4863   30 FC                  JR   NC,EX2   
4865   23                     INC   HL   ;BUMP TO NEXT TAB. ITEM
4866   D1                     POP   DE   ;RESTORE STRING POINTER
4867   18 E4                  JR   EX0   ;TEST AGAINST NEXT ITEM
4869                EX3:         
4869   3E 7F                  LD   A,7FH   ;PARTIAL MATCH, FIND
486B                EX4:         
486B   23                     INC   HL   ;JUMP ADDR., WHICH IS
486C   BE                     CP   (HL)   ;FLAGGED BY BIT 7
486D   30 FC                  JR   NC,EX4   
486F                EX5:         
486F   7E                     LD   A,(HL)   ;LOAD HL WITH THE JUMP
4870   23                     INC   HL   ;ADDRESS FROM THE TABLE
4871   6E                     LD   L,(HL)   
4872   E6 7F                  AND   7FH   ;MASK OFF BIT 7
4874   00                     NOP      
4875   00                     NOP      
4876   67                     LD   H,A   
4877   F1                     POP   AF   ;CLEAN UP THE GABAGE
4878   E9                     JP   (HL)   ;AND WE GO DO IT
4879                             ;-------------------------------------------------------------------------------
4879                             ;///////////////////////////////////////////////////////////////////////////////
4879                             ;-------------------------------------------------------------------------------
4879                             ;COMPUTER SPECIFIC ROUTINES.
4879                             ;-------------------------------------------------------------------------------
4879                SERIAL_INIT:      
4879   21 00 20               LD   HL,2000H   ;POWER UP DELAY
487C   CD F9 C6               CALL   timeDelay   
487F   3E 40                  LD   A,40H   
4881   D3 01                  OUT   (DIGITS),A   ;MAKE THE OUTPUT PORT HIGH
4883   C9                     RET      
4884                             ;-------------------------------------------------------------------------------
4884                TX_RDY:      
4884                             ; This routine sends the character to the output port.  Port is always
4884                             ; ready as init and last part sets output port to high for two stop bits
4884   F5                     PUSH   AF   
4885   C5                     PUSH   BC   
4886   E5                     PUSH   HL   
4887   D5                     PUSH   DE   
4888   F5                     PUSH   AF   
4889   CD A6 CF               CALL   getGLCDTerm   ;CHECK OUTPUT
488C   B7                     OR   A   ;CHECK VALUE
488D   28 07                  JR   Z,SERIAL   
488F                GLCD:        
488F   F1                     POP   AF   
4890   4F                     LD   C,A   
4891   CD 3C DB               CALL   sendCharToLCD   
4894   18 25                  JR   TXEXIT   
4896                SERIAL:      
4896   F1                     POP   AF   
4897   21 1B 00               LD   HL,BAUD   ;HL HOLDS THE BIT TIME DELAY
489A   4F                     LD   C,A   ;STORE CHRACTER IN C FOR BIT SENDING
489B   AF                     XOR   A   ;TRANSMIT THE START BIT
489C   D3 01                  OUT   (DIGITS),A   
489E   CD F9 C6               CALL   timeDelay   
48A1   06 08                  LD   B,08H   ;TRANSMIT 8 BITS OF DATA
48A3   CB 09                  RRC   C   ;SHIFT BIT 0 TO BIT 7
48A5                NXTBIT:      
48A5   CB 09                  RRC   C   ;SHIFT BITS TO D6
48A7   79                     LD   A,C   ;SEND FIRST LSB
48A8   E6 40                  AND   40H   ;FOR ONE BIT TIME
48AA   D3 01                  OUT   (DIGITS),A   
48AC   CD F9 C6               CALL   timeDelay   
48AF   10 F4                  DJNZ   NXTBIT   ;DO FOR ALL BITS
48B1   3E 40                  LD   A,40H   ;SEND THE TWO STOP BITS
48B3   D3 01                  OUT   (DIGITS),A   
48B5   CD F9 C6               CALL   timeDelay   
48B8   CD F9 C6               CALL   timeDelay   
48BB                TXEXIT:      
48BB   D1                     POP   DE   
48BC   E1                     POP   HL   
48BD   C1                     POP   BC   
48BE   F1                     POP   AF   
48BF   C9                     RET      
48C0                             ;-------------------------------------------------------------------------------
48C0                RX_RDY:      
48C0                             ; This routine is for checkif if a character is available over
48C0                             ; serial. If a character is available, it returns to the calling
48C0                             ; function with the character in "A" and the Z-flag reset.
48C0                             ; However, if a character is not available, it returns with the
48C0                             ; Z-flag set.
48C0   C5                     PUSH   BC   
48C1   E5                     PUSH   HL   
48C2   D5                     PUSH   DE   
48C3   CD A6 CF               CALL   getGLCDTerm   ;CHECK INPUT
48C6   B7                     OR   A   ;CHECK VALUE
48C7   28 0A                  JR   Z,SERIALI   
48C9                GLCDI:       
48C9   CD 36 CC               CALL   matrixScan   ;READ MATRIX KEYBOARD
48CC   CD FF D0               CALL   parseMatrixScan   ;PARSE KEY PRESS
48CF   30 0C                  JR   NC,NOCHAR   
48D1   18 2F                  JR   RX_EXIT   ;EXIT
48D3                SERIALI:      
48D3   06 20                  LD   B,20H   ;CHECK FOR START BIT 20H TIMES BEFORE EXITING
48D5                LSTARTBIT:      
48D5   DB 03                  IN   A,(SYS_INPUT)   
48D7   CB 7F                  BIT   7,A   
48D9   28 05                  JR   Z,GETCHAR   ;START BIT FOUND, GET CHARACTER
48DB   10 F8                  DJNZ   LSTARTBIT   ;KEEP CHECKING FOR START BIT
48DD                NOCHAR:      
48DD   AF                     XOR   A   ;SET ZERO FLAG
48DE   18 22                  JR   RX_EXIT   ;EXIT
48E0                GETCHAR:      ;START BIT DETECTED
48E0   21 1B 00               LD   HL,BAUD   ;DELAY FOR HALF A
48E3   CB 3C                  SRL   H   ;BIT TIME TO SAMPLE THE MIDDLE
48E5   CB 1D                  RR   L   ;OF THE BIT CELL
48E7   CD F9 C6               CALL   timeDelay   
48EA   DB 03                  IN   A,(SYS_INPUT)   
48EC   CB 7F                  BIT   7,A   ;CHECK THE START BIT IS STILL LOW
48EE   20 E5                  JR   NZ,LSTARTBIT   
48F0   06 08                  LD   B,08H   ;VALID START BIT DETECTED
48F2                GETBITS:      
48F2   21 1B 00               LD   HL,BAUD   
48F5   CD F9 C6               CALL   timeDelay   ;DELAY FOR ONE FULL BIT TIME
48F8   DB 03                  IN   A,(SYS_INPUT)   
48FA   CB 17                  RL   A   
48FC   CB 19                  RR   C   ;SHIFT BIT INTO OUTPUT REGISTER
48FE   10 F2                  DJNZ   GETBITS   
4900   79                     LD   A,C   
4901   B7                     OR   A   ;CLEAR CARRY FLAG AND RESET ZERO FLAG
4902                RX_EXIT:      
4902   D1                     POP   DE   
4903   E1                     POP   HL   
4904   C1                     POP   BC   
4905   C9                     RET      
4906                             ;-------------------------------------------------------------------------------
4906                             ;///////////////////////////////////////////////////////////////////////////////
4906                             ;-------------------------------------------------------------------------------
4906                LSTROM:      ;ALL ABOVE CAN BE ROM
4906                             ;HERE DOWN MUST BE RAM
4906                          .END      


BAUD:               001B DEFINED AT LINE 49
                    > USED AT LINE 1958
                    > USED AT LINE 2015
                    > USED AT LINE 2025
SYS_INPUT:          0003 DEFINED AT LINE 50
                    > USED AT LINE 2006
                    > USED AT LINE 2019
                    > USED AT LINE 2027
DIGITS:             0001 DEFINED AT LINE 51
                    > USED AT LINE 1935
                    > USED AT LINE 1961
                    > USED AT LINE 1969
                    > USED AT LINE 1973
SPACE:              0020 DEFINED AT LINE 55
                    > USED AT LINE 157
                    > USED AT LINE 1555
CTRLC:              0003 DEFINED AT LINE 56
                    > USED AT LINE 351
                    > USED AT LINE 1781
CTRLG:              0007 DEFINED AT LINE 57
BKSP:               0008 DEFINED AT LINE 58
                    > USED AT LINE 1328
                    > USED AT LINE 1349
LF:                 000A DEFINED AT LINE 59
                    > USED AT LINE 1331
                    > USED AT LINE 1720
                    > USED AT LINE 1758
VT:                 000B DEFINED AT LINE 60
                    > USED AT LINE 1482
CS:                 000C DEFINED AT LINE 61
CR:                 000D DEFINED AT LINE 62
                    > USED AT LINE 138
                    > USED AT LINE 254
                    > USED AT LINE 255
                    > USED AT LINE 256
                    > USED AT LINE 257
                    > USED AT LINE 498
                    > USED AT LINE 857
                    > USED AT LINE 1248
                    > USED AT LINE 1256
                    > USED AT LINE 1339
                    > USED AT LINE 1387
                    > USED AT LINE 1444
                    > USED AT LINE 1453
                    > USED AT LINE 1463
                    > USED AT LINE 1480
                    > USED AT LINE 1718
                    > USED AT LINE 1722
                    > USED AT LINE 1788
CTRLO:              000F DEFINED AT LINE 63
                    > USED AT LINE 1763
CTRLQ:              0011 DEFINED AT LINE 64
CTRLD:              0004 DEFINED AT LINE 65
                    > USED AT LINE 1783
CTRLU:              0015 DEFINED AT LINE 66
CTRLZ:              001A DEFINED AT LINE 67
                    > USED AT LINE 1335
ESC:                001B DEFINED AT LINE 68
DEL:                007F DEFINED AT LINE 69
                    > USED AT LINE 1557
OCSW:               17C0 DEFINED AT LINE 73
                    > USED AT LINE 74
                    > USED AT LINE 75
                    > USED AT LINE 76
                    > USED AT LINE 77
                    > USED AT LINE 78
                    > USED AT LINE 79
                    > USED AT LINE 80
                    > USED AT LINE 81
                    > USED AT LINE 82
                    > USED AT LINE 83
                    > USED AT LINE 84
                    > USED AT LINE 85
                    > USED AT LINE 141
                    > USED AT LINE 297
                    > USED AT LINE 1750
                    > USED AT LINE 1765
                    > USED AT LINE 1767
CURRNT:             17C1 DEFINED AT LINE 74
                    > USED AT LINE 303
                    > USED AT LINE 421
                    > USED AT LINE 575
                    > USED AT LINE 594
                    > USED AT LINE 651
                    > USED AT LINE 733
                    > USED AT LINE 797
                    > USED AT LINE 824
                    > USED AT LINE 827
                    > USED AT LINE 845
                    > USED AT LINE 1270
STKGOS:             17C3 DEFINED AT LINE 75
                    > USED AT LINE 308
                    > USED AT LINE 577
                    > USED AT LINE 582
                    > USED AT LINE 586
                    > USED AT LINE 592
VARNXT:             17C5 DEFINED AT LINE 76
                    > USED AT LINE 690
                    > USED AT LINE 702
STKINP:             17C7 DEFINED AT LINE 77
                    > USED AT LINE 794
                    > USED AT LINE 830
LOPVAR:             17C9 DEFINED AT LINE 78
                    > USED AT LINE 307
                    > USED AT LINE 580
                    > USED AT LINE 635
                    > USED AT LINE 656
                    > USED AT LINE 694
                    > USED AT LINE 719
                    > USED AT LINE 1626
                    > USED AT LINE 1647
                    > USED AT LINE 1659
LOPINC:             17CB DEFINED AT LINE 79
                    > USED AT LINE 649
                    > USED AT LINE 708
                    > USED AT LINE 1631
                    > USED AT LINE 1657
LOPLMT:             17CD DEFINED AT LINE 80
                    > USED AT LINE 640
                    > USED AT LINE 723
                    > USED AT LINE 1633
                    > USED AT LINE 1655
LOPLN:              17CF DEFINED AT LINE 81
                    > USED AT LINE 652
                    > USED AT LINE 732
                    > USED AT LINE 1635
                    > USED AT LINE 1653
LOPPT:              17D1 DEFINED AT LINE 82
                    > USED AT LINE 654
                    > USED AT LINE 683
                    > USED AT LINE 734
                    > USED AT LINE 1637
                    > USED AT LINE 1651
RANPNT:             17D3 DEFINED AT LINE 83
                    > USED AT LINE 1080
                    > USED AT LINE 1089
                    > USED AT LINE 1707
TXTUNF:             17D5 DEFINED AT LINE 84
                    > USED AT LINE 340
                    > USED AT LINE 344
                    > USED AT LINE 348
                    > USED AT LINE 361
                    > USED AT LINE 408
                    > USED AT LINE 1111
                    > USED AT LINE 1366
                    > USED AT LINE 1709
TXTBGN:             17D7 DEFINED AT LINE 85
                    > USED AT LINE 407
                    > USED AT LINE 414
                    > USED AT LINE 1362
                    > USED AT LINE 1708
TXTEND:             3E00 DEFINED AT LINE 86
                    > USED AT LINE 358
VARBGN:             3E00 DEFINED AT LINE 89
                    > USED AT LINE 179
                    > USED AT LINE 189
                    > USED AT LINE 1114
BUFFER:             3E37 DEFINED AT LINE 90
                    > USED AT LINE 314
                    > USED AT LINE 834
                    > USED AT LINE 1324
                    > USED AT LINE 1346
BUFEND:             3E87 DEFINED AT LINE 91
                    > USED AT LINE 1342
STKLMT:             3E88 DEFINED AT LINE 92
                    > USED AT LINE 1642
STACK:              3EFF DEFINED AT LINE 93
                    > USED AT LINE 129
                    > USED AT LINE 293
GETGLCDTERM:        CFA6 DEFINED AT LINE 96
                    > USED AT LINE 1428
                    > USED AT LINE 1948
                    > USED AT LINE 1995
SENDSTRINGTOLCD:    DBAD DEFINED AT LINE 97
                    > USED AT LINE 1435
TIMEDELAY:          C6F9 DEFINED AT LINE 98
                    > USED AT LINE 1933
                    > USED AT LINE 1962
                    > USED AT LINE 1970
                    > USED AT LINE 1974
                    > USED AT LINE 1975
                    > USED AT LINE 2018
                    > USED AT LINE 2026
SENDCHARTOLCD:      DB3C DEFINED AT LINE 99
                    > USED AT LINE 1954
MATRIXSCAN:         CC36 DEFINED AT LINE 100
                    > USED AT LINE 1999
PARSEMATRIXSCAN:    D0FF DEFINED AT LINE 101
                    > USED AT LINE 2000
TINYBASIC:          4000 DEFINED AT LINE 128
                    > USED AT LINE 1084
                    > USED AT LINE 1706
RST08TB:            4006 DEFINED AT LINE 132
                    > USED AT LINE 491
                    > USED AT LINE 497
                    > USED AT LINE 503
                    > USED AT LINE 510
                    > USED AT LINE 517
                    > USED AT LINE 524
                    > USED AT LINE 534
                    > USED AT LINE 849
                    > USED AT LINE 861
                    > USED AT LINE 942
                    > USED AT LINE 948
                    > USED AT LINE 954
                    > USED AT LINE 972
                    > USED AT LINE 984
                    > USED AT LINE 1014
                    > USED AT LINE 1060
                    > USED AT LINE 1064
                    > USED AT LINE 1227
                    > USED AT LINE 1241
                    > USED AT LINE 1247
                    > USED AT LINE 1457
                    > USED AT LINE 1471
                    > USED AT LINE 1477
                    > USED AT LINE 1729
CRLF:               400E DEFINED AT LINE 137
                    > USED AT LINE 298
                    > USED AT LINE 494
                    > USED AT LINE 500
                    > USED AT LINE 540
                    > USED AT LINE 1353
RST10TB:            4010 DEFINED AT LINE 140
                    > USED AT LINE 1285
                    > USED AT LINE 1323
                    > USED AT LINE 1330
                    > USED AT LINE 1350
                    > USED AT LINE 1452
                    > USED AT LINE 1481
                    > USED AT LINE 1483
                    > USED AT LINE 1520
                    > USED AT LINE 1525
                    > USED AT LINE 1533
                    > USED AT LINE 1545
                    > USED AT LINE 1552
                    > USED AT LINE 1583
                    > USED AT LINE 1721
RST18TB:            4018 DEFINED AT LINE 145
                    > USED AT LINE 430
                    > USED AT LINE 506
                    > USED AT LINE 513
                    > USED AT LINE 520
                    > USED AT LINE 527
                    > USED AT LINE 543
                    > USED AT LINE 571
                    > USED AT LINE 639
                    > USED AT LINE 644
                    > USED AT LINE 785
                    > USED AT LINE 835
                    > USED AT LINE 1063
                    > USED AT LINE 1230
                    > USED AT LINE 1725
                    > USED AT LINE 1733
RST20TB:            401F DEFINED AT LINE 149
                    > USED AT LINE 177
                    > USED AT LINE 359
                    > USED AT LINE 698
                    > USED AT LINE 1082
                    > USED AT LINE 1190
                    > USED AT LINE 1368
                    > USED AT LINE 1603
RST28TB:            4025 DEFINED AT LINE 156
                    > USED AT LINE 133
                    > USED AT LINE 160
                    > USED AT LINE 166
                    > USED AT LINE 217
                    > USED AT LINE 316
                    > USED AT LINE 1255
                    > USED AT LINE 1889
RST30TB:            402C DEFINED AT LINE 162
                    > USED AT LINE 541
                    > USED AT LINE 597
                    > USED AT LINE 685
                    > USED AT LINE 736
                    > USED AT LINE 742
                    > USED AT LINE 854
                    > USED AT LINE 866
                    > USED AT LINE 1741
                    > USED AT LINE 1751
RST38TB:            4033 DEFINED AT LINE 166
                    > USED AT LINE 688
                    > USED AT LINE 805
                    > USED AT LINE 810
                    > USED AT LINE 1047
                    > USED AT LINE 1224
TV1:                4055 DEFINED AT LINE 184
                    > USED AT LINE 169
TC1:                4061 DEFINED AT LINE 198
                    > USED AT LINE 135
TC2:                406B DEFINED AT LINE 208
                    > USED AT LINE 200
TSTNUM:             406F DEFINED AT LINE 214
                    > USED AT LINE 315
                    > USED AT LINE 480
                    > USED AT LINE 1055
TN1:                4076 DEFINED AT LINE 219
                    > USED AT LINE 245
QHOW:               4098 DEFINED AT LINE 247
                    > USED AT LINE 173
                    > USED AT LINE 226
                    > USED AT LINE 970
                    > USED AT LINE 1038
                    > USED AT LINE 1075
                    > USED AT LINE 1077
                    > USED AT LINE 1179
                    > USED AT LINE 1361
                    > USED AT LINE 1728
                    > USED AT LINE 1736
AHOW:               4099 DEFINED AT LINE 249
                    > USED AT LINE 434
                    > USED AT LINE 574
                    > USED AT LINE 1001
                    > USED AT LINE 1009
                    > USED AT LINE 1028
HOW:                409F DEFINED AT LINE 254
                    > USED AT LINE 250
OK:                 40A4 DEFINED AT LINE 255
                    > USED AT LINE 299
WHAT:               40A7 DEFINED AT LINE 256
                    > USED AT LINE 1261
SORRY:              40AD DEFINED AT LINE 257
                    > USED AT LINE 1292
RSTART:             40B3 DEFINED AT LINE 292
                    > USED AT LINE 352
                    > USED AT LINE 411
                    > USED AT LINE 418
                    > USED AT LINE 484
                    > USED AT LINE 792
                    > USED AT LINE 1276
                    > USED AT LINE 1288
                    > USED AT LINE 1710
                    > USED AT LINE 1782
ST1:                40B6 DEFINED AT LINE 295
ST2:                40CB DEFINED AT LINE 305
                    > USED AT LINE 302
ST3:                40D4 DEFINED AT LINE 310
                    > USED AT LINE 367
ST4:                410A DEFINED AT LINE 346
                    > USED AT LINE 335
NEW:                4131 DEFINED AT LINE 405
STOP:               413A DEFINED AT LINE 409
RUN:                4140 DEFINED AT LINE 412
RUNNXL:             4146 DEFINED AT LINE 415
                    > USED AT LINE 501
                    > USED AT LINE 1251
                    > USED AT LINE 1465
RUNTSL:             414F DEFINED AT LINE 419
                    > USED AT LINE 436
                    > USED AT LINE 583
                    > USED AT LINE 791
RUNSML:             4156 DEFINED AT LINE 425
                    > USED AT LINE 495
                    > USED AT LINE 789
                    > USED AT LINE 1245
GOTO:               415F DEFINED AT LINE 429
LIST:               416F DEFINED AT LINE 479
LS1:                4178 DEFINED AT LINE 483
                    > USED AT LINE 488
PRINT:              4186 DEFINED AT LINE 489
PR2:                4192 DEFINED AT LINE 496
                    > USED AT LINE 493
PR0:                419C DEFINED AT LINE 502
                    > USED AT LINE 499
                    > USED AT LINE 538
PR9:                41A7 DEFINED AT LINE 509
                    > USED AT LINE 505
PR10:               41B4 DEFINED AT LINE 516
                    > USED AT LINE 512
PR11:               41C1 DEFINED AT LINE 523
                    > USED AT LINE 519
PR1:                41CE DEFINED AT LINE 530
                    > USED AT LINE 526
PR3:                41D3 DEFINED AT LINE 533
                    > USED AT LINE 508
                    > USED AT LINE 515
                    > USED AT LINE 522
                    > USED AT LINE 529
                    > USED AT LINE 547
PR6:                41DD DEFINED AT LINE 539
                    > USED AT LINE 536
PR8:                41E3 DEFINED AT LINE 542
                    > USED AT LINE 532
GOSUB:              41ED DEFINED AT LINE 569
RETURN:             420F DEFINED AT LINE 584
FOR:                422A DEFINED AT LINE 631
FR1:                423A DEFINED AT LINE 638
FR2:                4246 DEFINED AT LINE 643
FR3:                424B DEFINED AT LINE 646
FR4:                424E DEFINED AT LINE 648
                    > USED AT LINE 645
FR5:                4251 DEFINED AT LINE 650
FR7:                4265 DEFINED AT LINE 661
                    > USED AT LINE 669
                    > USED AT LINE 672
FR8:                4282 DEFINED AT LINE 682
                    > USED AT LINE 665
NEXT:               4289 DEFINED AT LINE 687
NX0:                4292 DEFINED AT LINE 691
                    > USED AT LINE 703
NX3:                42AA DEFINED AT LINE 704
                    > USED AT LINE 699
NX4:                42BC DEFINED AT LINE 717
                    > USED AT LINE 714
NX1:                42CC DEFINED AT LINE 728
                    > USED AT LINE 726
NX5:                42DF DEFINED AT LINE 737
                    > USED AT LINE 716
NX2:                42E1 DEFINED AT LINE 740
                    > USED AT LINE 731
REM:                42E7 DEFINED AT LINE 781
IFF:                42EC DEFINED AT LINE 784
IF1:                42EF DEFINED AT LINE 786
                    > USED AT LINE 783
INPERR:             42FD DEFINED AT LINE 793
                    > USED AT LINE 1279
INPUT:              4307 DEFINED AT LINE 800
IP1:                4307 DEFINED AT LINE 801
                    > USED AT LINE 826
                    > USED AT LINE 852
IP2:                4314 DEFINED AT LINE 808
                    > USED AT LINE 804
IP3:                4326 DEFINED AT LINE 821
                    > USED AT LINE 807
IP4:                4352 DEFINED AT LINE 847
                    > USED AT LINE 806
IP5:                435A DEFINED AT LINE 853
                    > USED AT LINE 851
DEFLT:              435D DEFINED AT LINE 855
LET:                4362 DEFINED AT LINE 859
                    > USED AT LINE 864
LT1:                436C DEFINED AT LINE 865
                    > USED AT LINE 858
                    > USED AT LINE 863
EXPR1:              436F DEFINED AT LINE 887
                    > USED AT LINE 147
XP11:               4375 DEFINED AT LINE 890
XP12:               437B DEFINED AT LINE 895
XP13:               4381 DEFINED AT LINE 900
XP14:               4388 DEFINED AT LINE 906
XP15:               4390 DEFINED AT LINE 913
XP16:               4396 DEFINED AT LINE 918
XP17:               439C DEFINED AT LINE 923
XP18:               439E DEFINED AT LINE 926
                    > USED AT LINE 891
                    > USED AT LINE 896
                    > USED AT LINE 901
                    > USED AT LINE 907
                    > USED AT LINE 914
                    > USED AT LINE 919
EXPR2:              43B3 DEFINED AT LINE 941
                    > USED AT LINE 145
                    > USED AT LINE 933
XP21:               43BD DEFINED AT LINE 947
                    > USED AT LINE 944
XP22:               43C2 DEFINED AT LINE 951
                    > USED AT LINE 950
XP23:               43C5 DEFINED AT LINE 953
                    > USED AT LINE 967
                    > USED AT LINE 969
XP24:               43CE DEFINED AT LINE 959
                    > USED AT LINE 979
XP25:               43DF DEFINED AT LINE 971
                    > USED AT LINE 956
XP26:               43E4 DEFINED AT LINE 975
                    > USED AT LINE 946
EXPR3:              43ED DEFINED AT LINE 981
                    > USED AT LINE 952
                    > USED AT LINE 958
                    > USED AT LINE 977
XP31:               43F0 DEFINED AT LINE 983
                    > USED AT LINE 1042
XP32:               440E DEFINED AT LINE 1002
                    > USED AT LINE 997
XP33:               4415 DEFINED AT LINE 1007
                    > USED AT LINE 1011
XP34:               441E DEFINED AT LINE 1013
                    > USED AT LINE 986
XP35:               443F DEFINED AT LINE 1034
                    > USED AT LINE 1006
                    > USED AT LINE 1012
EXPR4:              444C DEFINED AT LINE 1043
                    > USED AT LINE 982
                    > USED AT LINE 988
                    > USED AT LINE 1018
XP40:               4452 DEFINED AT LINE 1046
XP41:               445C DEFINED AT LINE 1054
                    > USED AT LINE 1048
PARN:               4462 DEFINED AT LINE 1059
                    > USED AT LINE 171
                    > USED AT LINE 1072
                    > USED AT LINE 1099
                    > USED AT LINE 1105
XP42:               446F DEFINED AT LINE 1067
                    > USED AT LINE 974
                    > USED AT LINE 1016
XP43:               4470 DEFINED AT LINE 1069
                    > USED AT LINE 1062
                    > USED AT LINE 1066
RND:                4473 DEFINED AT LINE 1071
RA1:                448F DEFINED AT LINE 1085
                    > USED AT LINE 1083
ABS:                449F DEFINED AT LINE 1098
PEEK:               44A8 DEFINED AT LINE 1104
SIZE:               44B0 DEFINED AT LINE 1110
                    > USED AT LINE 176
DIVIDE:             44BD DEFINED AT LINE 1136
                    > USED AT LINE 1030
                    > USED AT LINE 1093
                    > USED AT LINE 1502
DV1:                44C8 DEFINED AT LINE 1145
                    > USED AT LINE 1140
DV2:                44CA DEFINED AT LINE 1147
                    > USED AT LINE 1150
SUBDE:              44D2 DEFINED AT LINE 1153
                    > USED AT LINE 180
                    > USED AT LINE 1115
                    > USED AT LINE 1149
CHKSGN:             44D9 DEFINED AT LINE 1161
                    > USED AT LINE 990
                    > USED AT LINE 992
                    > USED AT LINE 1020
                    > USED AT LINE 1022
                    > USED AT LINE 1101
                    > USED AT LINE 1491
CHGSGN:             44DC DEFINED AT LINE 1165
                    > USED AT LINE 978
                    > USED AT LINE 1041
                    > USED AT LINE 1643
CKHLDE:             44F1 DEFINED AT LINE 1184
                    > USED AT LINE 729
                    > USED AT LINE 936
CK1:                44F7 DEFINED AT LINE 1189
                    > USED AT LINE 1187
SETVAL:             44FA DEFINED AT LINE 1223
                    > USED AT LINE 633
                    > USED AT LINE 860
SV1:                4510 DEFINED AT LINE 1238
                    > USED AT LINE 1229
FIN:                4513 DEFINED AT LINE 1240
                    > USED AT LINE 163
                    > USED AT LINE 537
FI1:                451C DEFINED AT LINE 1246
                    > USED AT LINE 1243
FI2:                4525 DEFINED AT LINE 1252
                    > USED AT LINE 1249
ENDCHK:             4526 DEFINED AT LINE 1254
                    > USED AT LINE 406
                    > USED AT LINE 410
                    > USED AT LINE 413
                    > USED AT LINE 432
                    > USED AT LINE 481
                    > USED AT LINE 585
QWHAT:              452C DEFINED AT LINE 1258
                    > USED AT LINE 164
                    > USED AT LINE 589
                    > USED AT LINE 689
                    > USED AT LINE 811
                    > USED AT LINE 1070
                    > USED AT LINE 1225
                    > USED AT LINE 1239
                    > USED AT LINE 1743
AWHAT:              452D DEFINED AT LINE 1260
                    > USED AT LINE 697
ERROR_ROUTINE:      4530 DEFINED AT LINE 1262
                    > USED AT LINE 251
                    > USED AT LINE 1293
QSORRY:             455B DEFINED AT LINE 1289
                    > USED AT LINE 360
                    > USED AT LINE 1646
ASORRY:             455C DEFINED AT LINE 1291
                    > USED AT LINE 178
GETLN:              4561 DEFINED AT LINE 1322
                    > USED AT LINE 312
                    > USED AT LINE 833
                    > USED AT LINE 1357
GL1:                4567 DEFINED AT LINE 1325
                    > USED AT LINE 1327
                    > USED AT LINE 1332
                    > USED AT LINE 1334
                    > USED AT LINE 1343
                    > USED AT LINE 1351
GL3:                4588 DEFINED AT LINE 1344
                    > USED AT LINE 1329
GL4:                4595 DEFINED AT LINE 1352
                    > USED AT LINE 1336
                    > USED AT LINE 1347
FNDLN:              459C DEFINED AT LINE 1358
                    > USED AT LINE 333
                    > USED AT LINE 433
                    > USED AT LINE 482
                    > USED AT LINE 573
FNDLP:              45A4 DEFINED AT LINE 1363
                    > USED AT LINE 417
                    > USED AT LINE 487
FL1:                45A4 DEFINED AT LINE 1364
                    > USED AT LINE 1390
FNDNXT:             45B9 DEFINED AT LINE 1381
                    > USED AT LINE 337
FL2:                45BA DEFINED AT LINE 1383
                    > USED AT LINE 1377
                    > USED AT LINE 1388
FNDSKP:             45BB DEFINED AT LINE 1385
                    > USED AT LINE 790
PRTSTG:             45C3 DEFINED AT LINE 1426
                    > USED AT LINE 301
                    > USED AT LINE 817
                    > USED AT LINE 1264
                    > USED AT LINE 1287
                    > USED AT LINE 1462
                    > USED AT LINE 1547
                    > USED AT LINE 1702
                    > USED AT LINE 1705
PS0:                45D4 DEFINED AT LINE 1439
                    > USED AT LINE 1445
PS1:                45DD DEFINED AT LINE 1447
                    > USED AT LINE 1430
                    > USED AT LINE 1454
QTSTG:              45E9 DEFINED AT LINE 1456
                    > USED AT LINE 531
                    > USED AT LINE 803
QT1:                45F0 DEFINED AT LINE 1461
                    > USED AT LINE 1475
QT2:                45F9 DEFINED AT LINE 1466
                    > USED AT LINE 1485
QT3:                45FC DEFINED AT LINE 1470
                    > USED AT LINE 1459
QT4:                4605 DEFINED AT LINE 1476
                    > USED AT LINE 1473
QT5:                4617 DEFINED AT LINE 1486
                    > USED AT LINE 1479
PRTNUM:             4618 DEFINED AT LINE 1489
                    > USED AT LINE 545
                    > USED AT LINE 1543
PN1:                4623 DEFINED AT LINE 1495
                    > USED AT LINE 1492
PN2:                462A DEFINED AT LINE 1501
                    > USED AT LINE 1511
PN3:                4638 DEFINED AT LINE 1512
                    > USED AT LINE 1505
PN4:                4639 DEFINED AT LINE 1514
                    > USED AT LINE 1521
PN5:                4646 DEFINED AT LINE 1522
                    > USED AT LINE 1518
PN6:                464C DEFINED AT LINE 1527
                    > USED AT LINE 1534
PRTLN:              4658 DEFINED AT LINE 1535
                    > USED AT LINE 485
                    > USED AT LINE 1280
PRTCHR:             466C DEFINED AT LINE 1548
                    > USED AT LINE 528
PC1:                466D DEFINED AT LINE 1551
                    > USED AT LINE 1558
                    > USED AT LINE 1561
PRTASC:             4670 DEFINED AT LINE 1553
                    > USED AT LINE 521
PA1:                4679 DEFINED AT LINE 1559
                    > USED AT LINE 1556
PRTHEX:             467D DEFINED AT LINE 1562
                    > USED AT LINE 514
PH1:                4684 DEFINED AT LINE 1567
                    > USED AT LINE 1565
A2HEX:              4685 DEFINED AT LINE 1569
                    > USED AT LINE 1566
PH2:                468E DEFINED AT LINE 1577
                    > USED AT LINE 1575
MVUP1:              4699 DEFINED AT LINE 1602
                    > USED AT LINE 341
                    > USED AT LINE 366
                    > USED AT LINE 1609
MVDOWN:             46A3 DEFINED AT LINE 1610
                    > USED AT LINE 363
                    > USED AT LINE 680
                    > USED AT LINE 1622
MD1:                46AB DEFINED AT LINE 1617
                    > USED AT LINE 1613
POPA:               46B1 DEFINED AT LINE 1623
                    > USED AT LINE 596
                    > USED AT LINE 701
                    > USED AT LINE 741
PP1:                46CA DEFINED AT LINE 1638
                    > USED AT LINE 1629
PUSHA:              46CC DEFINED AT LINE 1641
                    > USED AT LINE 570
                    > USED AT LINE 632
PU1:                46F1 DEFINED AT LINE 1660
                    > USED AT LINE 1650
INIT:               46F4 DEFINED AT LINE 1698
                    > USED AT LINE 130
OUTC:               4714 DEFINED AT LINE 1711
                    > USED AT LINE 143
OUTC2:              4718 DEFINED AT LINE 1715
                    > USED AT LINE 1712
OUTP:               4727 DEFINED AT LINE 1724
OT1:                4745 DEFINED AT LINE 1742
                    > USED AT LINE 1731
XON:                4748 DEFINED AT LINE 1744
XOFF:               474C DEFINED AT LINE 1747
XO1:                474D DEFINED AT LINE 1749
                    > USED AT LINE 1746
CHKIO:              4753 DEFINED AT LINE 1752
                    > USED AT LINE 426
                    > USED AT LINE 486
                    > USED AT LINE 1326
                    > USED AT LINE 1768
CHKIO2:             476C DEFINED AT LINE 1769
                    > USED AT LINE 1759
CI1:                476F DEFINED AT LINE 1774
                    > USED AT LINE 1764
CI2:                4779 DEFINED AT LINE 1780
                    > USED AT LINE 1776
                    > USED AT LINE 1778
MSG1:               4782 DEFINED AT LINE 1788
                    > USED AT LINE 1701
MSG2:               4795 DEFINED AT LINE 1789
                    > USED AT LINE 1704
TAB1:               47AA DEFINED AT LINE 1818
                    > USED AT LINE 1887
TAB2:               47BA DEFINED AT LINE 1825
                    > USED AT LINE 427
TAB4:               480E DEFINED AT LINE 1855
                    > USED AT LINE 1044
TAB5:               4826 DEFINED AT LINE 1865
                    > USED AT LINE 636
TAB6:               482C DEFINED AT LINE 1869
                    > USED AT LINE 641
TAB8:               4834 DEFINED AT LINE 1873
                    > USED AT LINE 888
DIRECT:             484A DEFINED AT LINE 1887
                    > USED AT LINE 320
EXEC:               484D DEFINED AT LINE 1888
                    > USED AT LINE 428
                    > USED AT LINE 637
                    > USED AT LINE 642
                    > USED AT LINE 889
                    > USED AT LINE 1045
EX0:                484D DEFINED AT LINE 1889
                    > USED AT LINE 1909
EX1:                4851 DEFINED AT LINE 1891
                    > USED AT LINE 1898
EX2:                4861 DEFINED AT LINE 1903
                    > USED AT LINE 1906
EX3:                4869 DEFINED AT LINE 1910
                    > USED AT LINE 1895
EX4:                486B DEFINED AT LINE 1912
                    > USED AT LINE 1915
EX5:                486F DEFINED AT LINE 1916
                    > USED AT LINE 1902
SERIAL_INIT:        4879 DEFINED AT LINE 1931
                    > USED AT LINE 1699
TX_RDY:             4884 DEFINED AT LINE 1938
                    > USED AT LINE 1717
GLCD:               488F DEFINED AT LINE 1951
SERIAL:             4896 DEFINED AT LINE 1956
                    > USED AT LINE 1950
NXTBIT:             48A5 DEFINED AT LINE 1965
                    > USED AT LINE 1971
TXEXIT:             48BB DEFINED AT LINE 1976
                    > USED AT LINE 1955
RX_RDY:             48C0 DEFINED AT LINE 1984
                    > USED AT LINE 1753
GLCDI:              48C9 DEFINED AT LINE 1998
SERIALI:            48D3 DEFINED AT LINE 2003
                    > USED AT LINE 1997
LSTARTBIT:          48D5 DEFINED AT LINE 2005
                    > USED AT LINE 2009
                    > USED AT LINE 2021
NOCHAR:             48DD DEFINED AT LINE 2010
                    > USED AT LINE 2001
GETCHAR:            48E0 DEFINED AT LINE 2014
                    > USED AT LINE 2008
GETBITS:            48F2 DEFINED AT LINE 2024
                    > USED AT LINE 2030
RX_EXIT:            4902 DEFINED AT LINE 2033
                    > USED AT LINE 2002
                    > USED AT LINE 2012
LSTROM:             4906 DEFINED AT LINE 2044
                    > USED AT LINE 1081
